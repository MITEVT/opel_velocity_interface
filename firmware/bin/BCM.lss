
bin/BCM.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000d1 	.word	0x000000d1
   c:	000000d3 	.word	0x000000d3
	...
  2c:	000000d5 	.word	0x000000d5
	...
  38:	000000d7 	.word	0x000000d7
  3c:	00000381 	.word	0x00000381
  40:	000000db 	.word	0x000000db
  44:	000000db 	.word	0x000000db
  48:	000000db 	.word	0x000000db
  4c:	000000db 	.word	0x000000db
  50:	000000db 	.word	0x000000db
  54:	000000db 	.word	0x000000db
  58:	000000db 	.word	0x000000db
  5c:	000000db 	.word	0x000000db
  60:	000000db 	.word	0x000000db
  64:	000000db 	.word	0x000000db
  68:	000000db 	.word	0x000000db
  6c:	000000db 	.word	0x000000db
  70:	000000db 	.word	0x000000db
  74:	00000391 	.word	0x00000391
  78:	000000db 	.word	0x000000db
  7c:	000000db 	.word	0x000000db
  80:	000000db 	.word	0x000000db
  84:	000000db 	.word	0x000000db
  88:	000000db 	.word	0x000000db
  8c:	000000db 	.word	0x000000db
  90:	000000db 	.word	0x000000db
  94:	000000db 	.word	0x000000db
	...
  a0:	000000db 	.word	0x000000db
  a4:	000000db 	.word	0x000000db
  a8:	000000db 	.word	0x000000db
  ac:	00000000 	.word	0x00000000
  b0:	000000db 	.word	0x000000db
  b4:	000000db 	.word	0x000000db
  b8:	000000db 	.word	0x000000db
  bc:	000000db 	.word	0x000000db

000000c0 <Reset_Handler>:

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c0:	4801      	ldr	r0, [pc, #4]	; (c8 <Reset_Handler+0x8>)
    BLX     R0
  c2:	4780      	blx	r0
.if (RAM_MODE)
    LDR     R0,=main
  c4:	4801      	ldr	r0, [pc, #4]	; (cc <Reset_Handler+0xc>)
    BX      R0
  c6:	4700      	bx	r0

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c8:	00000781 	.word	0x00000781
    BLX     R0
.if (RAM_MODE)
    LDR     R0,=main
  cc:	000005c9 	.word	0x000005c9

000000d0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  d0:	e7fe      	b.n	d0 <NMI_Handler>

000000d2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  d2:	e7fe      	b.n	d2 <HardFault_Handler>

000000d4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  d4:	e7fe      	b.n	d4 <SVC_Handler>

000000d6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  d6:	e7fe      	b.n	d6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  d8:	e7fe      	b.n	d8 <PendSV_Handler+0x2>

000000da <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  da:	e7fe      	b.n	da <Default_Handler>

000000dc <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
  dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
  de:	f000 f853 	bl	188 <Chip_Clock_GetSystemClockRate>
  e2:	4b01      	ldr	r3, [pc, #4]	; (e8 <SystemCoreClockUpdate+0xc>)
  e4:	6018      	str	r0, [r3, #0]
}
  e6:	bd08      	pop	{r3, pc}
  e8:	10000100 	.word	0x10000100

000000ec <Chip_Clock_GetWDTOSCRate>:

#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
  ec:	b508      	push	{r3, lr}
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
  ee:	4b07      	ldr	r3, [pc, #28]	; (10c <Chip_Clock_GetWDTOSCRate+0x20>)
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f0:	211f      	movs	r1, #31
#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
  f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
  f4:	05da      	lsls	r2, r3, #23
	div = reg & 0x1F;
  f6:	400b      	ands	r3, r1

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  f8:	1c59      	adds	r1, r3, #1
  fa:	0f12      	lsrs	r2, r2, #28
  fc:	4b04      	ldr	r3, [pc, #16]	; (110 <Chip_Clock_GetWDTOSCRate+0x24>)
  fe:	0092      	lsls	r2, r2, #2
 100:	0049      	lsls	r1, r1, #1
 102:	58d0      	ldr	r0, [r2, r3]
 104:	f000 fb82 	bl	80c <__aeabi_uidiv>

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
}
 108:	bd08      	pop	{r3, pc}
 10a:	46c0      	nop			; (mov r8, r8)
 10c:	40048000 	.word	0x40048000
 110:	00000a00 	.word	0x00000a00

00000114 <Chip_Clock_GetSystemPLLInClockRate>:
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 114:	4b06      	ldr	r3, [pc, #24]	; (130 <Chip_Clock_GetSystemPLLInClockRate+0x1c>)
 116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 118:	2303      	movs	r3, #3
 11a:	4013      	ands	r3, r2
 11c:	d004      	beq.n	128 <Chip_Clock_GetSystemPLLInClockRate+0x14>
 11e:	2b01      	cmp	r3, #1
 120:	d104      	bne.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 122:	4b04      	ldr	r3, [pc, #16]	; (134 <Chip_Clock_GetSystemPLLInClockRate+0x20>)
 124:	6818      	ldr	r0, [r3, #0]
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_PLLCLKSRC_MAINOSC:
		clkRate = Chip_Clock_GetMainOscRate();
		break;
 126:	e002      	b.n	12e <Chip_Clock_GetSystemPLLInClockRate+0x1a>
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
	case SYSCTL_PLLCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 128:	4803      	ldr	r0, [pc, #12]	; (138 <Chip_Clock_GetSystemPLLInClockRate+0x24>)
 12a:	e000      	b.n	12e <Chip_Clock_GetSystemPLLInClockRate+0x1a>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
 12c:	2000      	movs	r0, #0
	}

	return clkRate;
}
 12e:	4770      	bx	lr
 130:	40048000 	.word	0x40048000
 134:	00000a54 	.word	0x00000a54
 138:	00b71b00 	.word	0x00b71b00

0000013c <Chip_Clock_GetSystemPLLOutClockRate>:

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <Chip_Clock_GetSystemPLLOutClockRate+0x14>)
	return clkRate;
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
 13e:	b510      	push	{r4, lr}
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 140:	689c      	ldr	r4, [r3, #8]
 142:	f7ff ffe7 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
}

/* Compute a PLL frequency */
STATIC uint32_t Chip_Clock_GetPLLFreq(uint32_t PLLReg, uint32_t inputRate)
{
	uint32_t msel = ((PLLReg & 0x1F) + 1);
 146:	231f      	movs	r3, #31
 148:	401c      	ands	r4, r3
 14a:	3401      	adds	r4, #1

	return inputRate * msel;
 14c:	4360      	muls	r0, r4
/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
								 Chip_Clock_GetSystemPLLInClockRate());
}
 14e:	bd10      	pop	{r4, pc}
 150:	40048000 	.word	0x40048000

00000154 <Chip_Clock_GetMainClockRate>:

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
 154:	b508      	push	{r3, lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 156:	4b0a      	ldr	r3, [pc, #40]	; (180 <Chip_Clock_GetMainClockRate+0x2c>)
 158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 15a:	2303      	movs	r3, #3
 15c:	4013      	ands	r3, r2
 15e:	2b02      	cmp	r3, #2
 160:	d006      	beq.n	170 <Chip_Clock_GetMainClockRate+0x1c>
 162:	2b03      	cmp	r3, #3
 164:	d007      	beq.n	176 <Chip_Clock_GetMainClockRate+0x22>
 166:	2b01      	cmp	r3, #1
 168:	d108      	bne.n	17c <Chip_Clock_GetMainClockRate+0x28>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_MAINCLKSRC_PLLIN:
		clkRate = Chip_Clock_GetSystemPLLInClockRate();
 16a:	f7ff ffd3 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
		break;
 16e:	e006      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
		clkRate = Chip_Clock_GetLFOOSCRate();
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
 170:	f7ff ffbc 	bl	ec <Chip_Clock_GetWDTOSCRate>
		break;
 174:	e003      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
#endif

	case SYSCTL_MAINCLKSRC_PLLOUT:
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
 176:	f7ff ffe1 	bl	13c <Chip_Clock_GetSystemPLLOutClockRate>
		break;
 17a:	e000      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 17c:	4801      	ldr	r0, [pc, #4]	; (184 <Chip_Clock_GetMainClockRate+0x30>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 17e:	bd08      	pop	{r3, pc}
 180:	40048000 	.word	0x40048000
 184:	00b71b00 	.word	0x00b71b00

00000188 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 188:	b508      	push	{r3, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 18a:	f7ff ffe3 	bl	154 <Chip_Clock_GetMainClockRate>
 18e:	4b02      	ldr	r3, [pc, #8]	; (198 <Chip_Clock_GetSystemClockRate+0x10>)
 190:	6f99      	ldr	r1, [r3, #120]	; 0x78
 192:	f000 fb3b 	bl	80c <__aeabi_uidiv>
}
 196:	bd08      	pop	{r3, pc}
 198:	40048000 	.word	0x40048000

0000019c <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 19c:	4b02      	ldr	r3, [pc, #8]	; (1a8 <Chip_GPIO_Init+0xc>)
 19e:	2140      	movs	r1, #64	; 0x40
 1a0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 1a2:	430a      	orrs	r2, r1
 1a4:	67da      	str	r2, [r3, #124]	; 0x7c

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
 1a6:	4770      	bx	lr
 1a8:	40048004 	.word	0x40048004

000001ac <Chip_GPIO_WriteDirBit>:
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_GPIO);
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
 1ac:	b510      	push	{r4, lr}
 1ae:	0409      	lsls	r1, r1, #16
 1b0:	2480      	movs	r4, #128	; 0x80
 1b2:	0224      	lsls	r4, r4, #8
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 1b4:	1840      	adds	r0, r0, r1
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
 1b6:	2b00      	cmp	r3, #0
 1b8:	d006      	beq.n	1c8 <Chip_GPIO_WriteDirBit+0x1c>
		pGPIO[port].DIR |= 1UL << bit;
 1ba:	2101      	movs	r1, #1
 1bc:	5903      	ldr	r3, [r0, r4]
 1be:	4091      	lsls	r1, r2
 1c0:	1c0a      	adds	r2, r1, #0
 1c2:	431a      	orrs	r2, r3
 1c4:	5102      	str	r2, [r0, r4]
 1c6:	e004      	b.n	1d2 <Chip_GPIO_WriteDirBit+0x26>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 1c8:	5903      	ldr	r3, [r0, r4]
 1ca:	2101      	movs	r1, #1
 1cc:	4091      	lsls	r1, r2
 1ce:	438b      	bics	r3, r1
 1d0:	5103      	str	r3, [r0, r4]
	}
}
 1d2:	bd10      	pop	{r4, pc}

000001d4 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
 1d4:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
 1d6:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, int itemSize, int count)
{
	RingBuff->data = buffer;
 1d8:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
 1da:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
 1dc:	6103      	str	r3, [r0, #16]
 1de:	60c3      	str	r3, [r0, #12]

	return 1;
}
 1e0:	2001      	movs	r0, #1
 1e2:	4770      	bx	lr

000001e4 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
 1e4:	b538      	push	{r3, r4, r5, lr}
 1e6:	1c04      	adds	r4, r0, #0
	uint8_t *ptr = RingBuff->data;
 1e8:	6805      	ldr	r5, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
 1ea:	6863      	ldr	r3, [r4, #4]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE int RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1ec:	68c0      	ldr	r0, [r0, #12]
 1ee:	6922      	ldr	r2, [r4, #16]
 1f0:	1a82      	subs	r2, r0, r2

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
 1f2:	2000      	movs	r0, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
 1f4:	429a      	cmp	r2, r3
 1f6:	da0b      	bge.n	210 <Stack_Size+0x10>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 1f8:	68e0      	ldr	r0, [r4, #12]
 1fa:	68a2      	ldr	r2, [r4, #8]
 1fc:	3b01      	subs	r3, #1
 1fe:	4003      	ands	r3, r0
 200:	4353      	muls	r3, r2
 202:	18e8      	adds	r0, r5, r3
	memcpy(ptr, data, RingBuff->itemSz);
 204:	f000 fbb2 	bl	96c <memcpy>
	RingBuff->head++;
 208:	68e3      	ldr	r3, [r4, #12]

	return 1;
 20a:	2001      	movs	r0, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
 20c:	3301      	adds	r3, #1
 20e:	60e3      	str	r3, [r4, #12]

	return 1;
}
 210:	bd38      	pop	{r3, r4, r5, pc}

00000212 <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
 212:	b538      	push	{r3, r4, r5, lr}
 214:	1c04      	adds	r4, r0, #0
 216:	1c08      	adds	r0, r1, #0
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 218:	68e1      	ldr	r1, [r4, #12]
 21a:	6922      	ldr	r2, [r4, #16]
	uint8_t *ptr = RingBuff->data;
 21c:	6825      	ldr	r5, [r4, #0]

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
		return 0;
 21e:	2300      	movs	r3, #0
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 220:	4291      	cmp	r1, r2
 222:	d00c      	beq.n	23e <RingBuffer_Pop+0x2c>
		return 0;

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 224:	6861      	ldr	r1, [r4, #4]
 226:	6923      	ldr	r3, [r4, #16]
 228:	68a2      	ldr	r2, [r4, #8]
 22a:	3901      	subs	r1, #1
 22c:	4019      	ands	r1, r3
 22e:	4351      	muls	r1, r2
 230:	1869      	adds	r1, r5, r1
	memcpy(data, ptr, RingBuff->itemSz);
 232:	f000 fb9b 	bl	96c <memcpy>
	RingBuff->tail++;
 236:	6923      	ldr	r3, [r4, #16]
 238:	3301      	adds	r3, #1
 23a:	6123      	str	r3, [r4, #16]

	return 1;
 23c:	2301      	movs	r3, #1
}
 23e:	1c18      	adds	r0, r3, #0
 240:	bd38      	pop	{r3, r4, r5, pc}
	...

00000244 <Chip_UART_Init>:
 244:	4b08      	ldr	r3, [pc, #32]	; (268 <Chip_UART_Init+0x24>)
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
 246:	b510      	push	{r4, lr}
 248:	1d1a      	adds	r2, r3, #4
 24a:	6fd4      	ldr	r4, [r2, #124]	; 0x7c
 24c:	2180      	movs	r1, #128	; 0x80
 24e:	0149      	lsls	r1, r1, #5
 250:	4321      	orrs	r1, r4
 252:	67d1      	str	r1, [r2, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 254:	3398      	adds	r3, #152	; 0x98
 256:	2201      	movs	r2, #1
 258:	601a      	str	r2, [r3, #0]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 25a:	2307      	movs	r3, #7
 25c:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 25e:	2303      	movs	r3, #3
 260:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
 262:	2310      	movs	r3, #16
 264:	6283      	str	r3, [r0, #40]	; 0x28
}
 266:	bd10      	pop	{r4, pc}
 268:	40048000 	.word	0x40048000

0000026c <Chip_UART_Send>:
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_UART0);
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
 26c:	b530      	push	{r4, r5, lr}
	int sent = 0;
 26e:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
 270:	4293      	cmp	r3, r2
 272:	da06      	bge.n	282 <Chip_UART_Send+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 274:	6944      	ldr	r4, [r0, #20]
 276:	06a5      	lsls	r5, r4, #26
 278:	d503      	bpl.n	282 <Chip_UART_Send+0x16>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
 27a:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
 27c:	3301      	adds	r3, #1
 27e:	6004      	str	r4, [r0, #0]
 280:	e7f6      	b.n	270 <Chip_UART_Send+0x4>
	}

	return sent;
}
 282:	1c18      	adds	r0, r3, #0
 284:	bd30      	pop	{r4, r5, pc}

00000286 <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
 286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 288:	1c07      	adds	r7, r0, #0
 28a:	1c0e      	adds	r6, r1, #0
 28c:	1c14      	adds	r4, r2, #0
	int pass, sent = 0;
 28e:	2500      	movs	r5, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
 290:	2c00      	cmp	r4, #0
 292:	dd08      	ble.n	2a6 <Chip_UART_SendBlocking+0x20>
		pass = Chip_UART_Send(pUART, p8, numBytes);
 294:	1c31      	adds	r1, r6, #0
 296:	1c22      	adds	r2, r4, #0
 298:	1c38      	adds	r0, r7, #0
 29a:	f7ff ffe7 	bl	26c <Chip_UART_Send>
		numBytes -= pass;
 29e:	1a24      	subs	r4, r4, r0
		sent += pass;
 2a0:	182d      	adds	r5, r5, r0
		p8 += pass;
 2a2:	1836      	adds	r6, r6, r0
 2a4:	e7f4      	b.n	290 <Chip_UART_SendBlocking+0xa>
	}

	return sent;
}
 2a6:	1c28      	adds	r0, r5, #0
 2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000002aa <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
 2aa:	b530      	push	{r4, r5, lr}
	int readBytes = 0;
 2ac:	2300      	movs	r3, #0
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
 2ae:	4293      	cmp	r3, r2
 2b0:	da06      	bge.n	2c0 <Chip_UART_Read+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 2b2:	6944      	ldr	r4, [r0, #20]
 2b4:	07e5      	lsls	r5, r4, #31
 2b6:	d503      	bpl.n	2c0 <Chip_UART_Read+0x16>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
 2b8:	6804      	ldr	r4, [r0, #0]
 2ba:	54cc      	strb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
		p8++;
		readBytes++;
 2bc:	3301      	adds	r3, #1
 2be:	e7f6      	b.n	2ae <Chip_UART_Read+0x4>
	}

	return readBytes;
}
 2c0:	1c18      	adds	r0, r3, #0
 2c2:	bd30      	pop	{r4, r5, pc}

000002c4 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
 2c4:	b570      	push	{r4, r5, r6, lr}
 2c6:	1c04      	adds	r4, r0, #0
 2c8:	1c0e      	adds	r6, r1, #0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2ca:	f7ff ff43 	bl	154 <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
 2ce:	0131      	lsls	r1, r6, #4
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2d0:	1c05      	adds	r5, r0, #0
	div = clkin / (baudrate * 16);
 2d2:	f000 fa9b 	bl	80c <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2d6:	68e2      	ldr	r2, [r4, #12]
 2d8:	2380      	movs	r3, #128	; 0x80
 2da:	1c01      	adds	r1, r0, #0
 2dc:	431a      	orrs	r2, r3
 2de:	60e2      	str	r2, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2e0:	1c0e      	adds	r6, r1, #0

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
 2e2:	0a00      	lsrs	r0, r0, #8
 2e4:	22ff      	movs	r2, #255	; 0xff
 2e6:	4016      	ands	r6, r2
	pUART->DLM = (uint32_t) dlm;
 2e8:	4002      	ands	r2, r0
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2ea:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
 2ec:	6062      	str	r2, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
 2ee:	68e2      	ldr	r2, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
 2f0:	1c28      	adds	r0, r5, #0
 2f2:	439a      	bics	r2, r3
 2f4:	60e2      	str	r2, [r4, #12]
 2f6:	f000 fa89 	bl	80c <__aeabi_uidiv>
}
 2fa:	bd70      	pop	{r4, r5, r6, pc}

000002fc <__reverse>:
#include "util.h"

void __reverse(char* begin,char* end) {
	char temp;

	while (end  >begin)
 2fc:	4281      	cmp	r1, r0
 2fe:	d906      	bls.n	30e <__reverse+0x12>
	{
		temp = *end;
 300:	780b      	ldrb	r3, [r1, #0]
		*end-- = *begin;
 302:	7802      	ldrb	r2, [r0, #0]
 304:	3901      	subs	r1, #1
 306:	704a      	strb	r2, [r1, #1]
		*begin++ = temp;
 308:	7003      	strb	r3, [r0, #0]
 30a:	3001      	adds	r0, #1
 30c:	e7f6      	b.n	2fc <__reverse>
	}
}
 30e:	4770      	bx	lr

00000310 <itoa>:

uint16_t getIDFromBytes(uint8_t high, uint8_t low) {
	return (low >> 5) | (high << 3);
}

char* itoa(int value, char* buffer, int base) {
 310:	b5f0      	push	{r4, r5, r6, r7, lr}

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 312:	1c13      	adds	r3, r2, #0

uint16_t getIDFromBytes(uint8_t high, uint8_t low) {
	return (low >> 5) | (high << 3);
}

char* itoa(int value, char* buffer, int base) {
 314:	b085      	sub	sp, #20

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 316:	3b02      	subs	r3, #2

uint16_t getIDFromBytes(uint8_t high, uint8_t low) {
	return (low >> 5) | (high << 3);
}

char* itoa(int value, char* buffer, int base) {
 318:	1c04      	adds	r4, r0, #0
 31a:	1c0f      	adds	r7, r1, #0
 31c:	9201      	str	r2, [sp, #4]
 31e:	1c0d      	adds	r5, r1, #0

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
 320:	2b0e      	cmp	r3, #14
 322:	d825      	bhi.n	370 <itoa+0x60>

char* itoa(int value, char* buffer, int base) {
	static const char digits[] = "0123456789abcdef";

	char* buffer_copy = buffer;
	int32_t sign = 0;
 324:	2300      	movs	r3, #0
 326:	9302      	str	r3, [sp, #8]
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
 328:	2a0a      	cmp	r2, #10
 32a:	d103      	bne.n	334 <itoa+0x24>
 32c:	17c3      	asrs	r3, r0, #31
 32e:	18c4      	adds	r4, r0, r3
 330:	9002      	str	r0, [sp, #8]
 332:	405c      	eors	r4, r3
 334:	1c3e      	adds	r6, r7, #0
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
 336:	9901      	ldr	r1, [sp, #4]
 338:	1c20      	adds	r0, r4, #0
 33a:	f000 fab5 	bl	8a8 <__aeabi_idiv>
			rem = value % base;
 33e:	9901      	ldr	r1, [sp, #4]
	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
 340:	9003      	str	r0, [sp, #12]
			rem = value % base;
 342:	1c20      	adds	r0, r4, #0
 344:	f000 fb06 	bl	954 <__aeabi_idivmod>
			*buffer++ = digits[rem];		// append the remainder to the string
 348:	4b0c      	ldr	r3, [pc, #48]	; (37c <itoa+0x6c>)
 34a:	1c75      	adds	r5, r6, #1
 34c:	5c5b      	ldrb	r3, [r3, r1]
 34e:	7033      	strb	r3, [r6, #0]
		} while ((value = quot));				// loop while there is something to convert
 350:	9b03      	ldr	r3, [sp, #12]
 352:	2b00      	cmp	r3, #0
 354:	d002      	beq.n	35c <itoa+0x4c>
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
			rem = value % base;
			*buffer++ = digits[rem];		// append the remainder to the string
 356:	1c2e      	adds	r6, r5, #0
		} while ((value = quot));				// loop while there is something to convert
 358:	1c1c      	adds	r4, r3, #0
 35a:	e7ec      	b.n	336 <itoa+0x26>

		if (sign<0)							// was the value negative?
 35c:	9b02      	ldr	r3, [sp, #8]
 35e:	2b00      	cmp	r3, #0
 360:	da02      	bge.n	368 <itoa+0x58>
			*buffer++ = '-';					// append the sign
 362:	232d      	movs	r3, #45	; 0x2d
 364:	1cb5      	adds	r5, r6, #2
 366:	7073      	strb	r3, [r6, #1]

		__reverse(buffer_copy, buffer-1);		// reverse the string
 368:	1e69      	subs	r1, r5, #1
 36a:	1c38      	adds	r0, r7, #0
 36c:	f7ff ffc6 	bl	2fc <__reverse>
	}

	*buffer='\0';
 370:	2300      	movs	r3, #0
	return buffer_copy;
 372:	1c38      	adds	r0, r7, #0
			*buffer++ = '-';					// append the sign

		__reverse(buffer_copy, buffer-1);		// reverse the string
	}

	*buffer='\0';
 374:	702b      	strb	r3, [r5, #0]
	return buffer_copy;
 376:	b005      	add	sp, #20
 378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 37a:	46c0      	nop			; (mov r8, r8)
 37c:	00000a40 	.word	0x00000a40

00000380 <SysTick_Handler>:

/**
 * SysTick Timer Interrupt Handler. Counts milliseconds since start
 */
void SysTick_Handler(void) {
	msTicks++;
 380:	4b02      	ldr	r3, [pc, #8]	; (38c <SysTick_Handler+0xc>)
 382:	681a      	ldr	r2, [r3, #0]
 384:	3201      	adds	r2, #1
 386:	601a      	str	r2, [r3, #0]
}
 388:	4770      	bx	lr
 38a:	46c0      	nop			; (mov r8, r8)
 38c:	10000240 	.word	0x10000240

00000390 <CAN_IRQHandler>:

/**
 * CCAN Interrupt Handler. Calls the isr() API located in the CCAN ROM
 */
void CAN_IRQHandler(void) {
 390:	b508      	push	{r3, lr}
	LPC_CCAN_API->isr();
 392:	4b03      	ldr	r3, [pc, #12]	; (3a0 <CAN_IRQHandler+0x10>)
 394:	681b      	ldr	r3, [r3, #0]
 396:	689b      	ldr	r3, [r3, #8]
 398:	685b      	ldr	r3, [r3, #4]
 39a:	4798      	blx	r3
}
 39c:	bd08      	pop	{r3, pc}
 39e:	46c0      	nop			; (mov r8, r8)
 3a0:	1fff1ff8 	.word	0x1fff1ff8

000003a4 <Board_SysTick_Init>:
// Public Functions and Members

const uint32_t OscRateIn = 0;

int8_t Board_SysTick_Init(void) {
	msTicks = 0;
 3a4:	4b0d      	ldr	r3, [pc, #52]	; (3dc <Board_SysTick_Init+0x38>)
// -------------------------------------------------------------
// Public Functions and Members

const uint32_t OscRateIn = 0;

int8_t Board_SysTick_Init(void) {
 3a6:	b510      	push	{r4, lr}
	msTicks = 0;
 3a8:	2400      	movs	r4, #0
 3aa:	601c      	str	r4, [r3, #0]

	// Update the value of SystemCoreClock to the clock speed in hz
	SystemCoreClockUpdate();
 3ac:	f7ff fe96 	bl	dc <SystemCoreClockUpdate>

	// Initialize SysTick Timer to fire interrupt at 1kHz
	return (SysTick_Config (SystemCoreClock / 1000));
 3b0:	4b0b      	ldr	r3, [pc, #44]	; (3e0 <Board_SysTick_Init+0x3c>)
 3b2:	21fa      	movs	r1, #250	; 0xfa
 3b4:	6818      	ldr	r0, [r3, #0]
 3b6:	0089      	lsls	r1, r1, #2
 3b8:	f000 fa28 	bl	80c <__aeabi_uidiv>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 3bc:	4b09      	ldr	r3, [pc, #36]	; (3e4 <Board_SysTick_Init+0x40>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 3be:	4a0a      	ldr	r2, [pc, #40]	; (3e8 <Board_SysTick_Init+0x44>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 3c0:	3801      	subs	r0, #1
 3c2:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 3c4:	6a10      	ldr	r0, [r2, #32]
 3c6:	21c0      	movs	r1, #192	; 0xc0
 3c8:	0200      	lsls	r0, r0, #8
 3ca:	0a00      	lsrs	r0, r0, #8
 3cc:	0609      	lsls	r1, r1, #24
 3ce:	4301      	orrs	r1, r0
 3d0:	6211      	str	r1, [r2, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 3d2:	2207      	movs	r2, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 3d4:	609c      	str	r4, [r3, #8]
}
 3d6:	1c20      	adds	r0, r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 3d8:	601a      	str	r2, [r3, #0]
 3da:	bd10      	pop	{r4, pc}
 3dc:	10000240 	.word	0x10000240
 3e0:	10000100 	.word	0x10000100
 3e4:	e000e010 	.word	0xe000e010
 3e8:	e000ed00 	.word	0xe000ed00

000003ec <Board_LEDs_Init>:

void Board_LEDs_Init(void) {
 3ec:	b510      	push	{r4, lr}
	Chip_GPIO_Init(LPC_GPIO);
 3ee:	24a0      	movs	r4, #160	; 0xa0
 3f0:	05e4      	lsls	r4, r4, #23
 3f2:	1c20      	adds	r0, r4, #0
 3f4:	f7ff fed2 	bl	19c <Chip_GPIO_Init>
	Chip_GPIO_WriteDirBit(LPC_GPIO, LED0, true);
 3f8:	1c20      	adds	r0, r4, #0
 3fa:	2102      	movs	r1, #2
 3fc:	220a      	movs	r2, #10
 3fe:	2301      	movs	r3, #1
 400:	f7ff fed4 	bl	1ac <Chip_GPIO_WriteDirBit>
}
 404:	bd10      	pop	{r4, pc}
	...

00000408 <Board_UART_Init>:
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 408:	4a0b      	ldr	r2, [pc, #44]	; (438 <Board_UART_Init+0x30>)

void Board_UART_Init(uint32_t baudrate) {
 40a:	b538      	push	{r3, r4, r5, lr}
 40c:	1c11      	adds	r1, r2, #0
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_RX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Rx pin
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_TX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Tx Pin

	Chip_UART_Init(LPC_USART);
 40e:	4c0b      	ldr	r4, [pc, #44]	; (43c <Board_UART_Init+0x34>)
 410:	2301      	movs	r3, #1
 412:	32a8      	adds	r2, #168	; 0xa8
 414:	31a4      	adds	r1, #164	; 0xa4
 416:	600b      	str	r3, [r1, #0]
void Board_LEDs_Init(void) {
	Chip_GPIO_Init(LPC_GPIO);
	Chip_GPIO_WriteDirBit(LPC_GPIO, LED0, true);
}

void Board_UART_Init(uint32_t baudrate) {
 418:	1c05      	adds	r5, r0, #0
 41a:	6013      	str	r3, [r2, #0]
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_RX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Rx pin
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_TX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Tx Pin

	Chip_UART_Init(LPC_USART);
 41c:	1c20      	adds	r0, r4, #0
 41e:	f7ff ff11 	bl	244 <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, baudrate);
 422:	1c29      	adds	r1, r5, #0
 424:	1c20      	adds	r0, r4, #0
 426:	f7ff ff4d 	bl	2c4 <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 42a:	2303      	movs	r3, #3
 42c:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 42e:	2381      	movs	r3, #129	; 0x81
 430:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
 432:	2380      	movs	r3, #128	; 0x80
 434:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);
}
 436:	bd38      	pop	{r3, r4, r5, pc}
 438:	40044000 	.word	0x40044000
 43c:	40008000 	.word	0x40008000

00000440 <Board_UART_Print>:

void Board_UART_Print(const char *str) {
 440:	b510      	push	{r4, lr}
 442:	1c04      	adds	r4, r0, #0
	Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
 444:	f000 fad4 	bl	9f0 <strlen>
 448:	1c21      	adds	r1, r4, #0
 44a:	1c02      	adds	r2, r0, #0
 44c:	4801      	ldr	r0, [pc, #4]	; (454 <Board_UART_Print+0x14>)
 44e:	f7ff ff1a 	bl	286 <Chip_UART_SendBlocking>
}
 452:	bd10      	pop	{r4, pc}
 454:	40008000 	.word	0x40008000

00000458 <Board_UART_Println>:

void Board_UART_Println(const char *str) {
 458:	b508      	push	{r3, lr}
	Board_UART_Print(str);
 45a:	f7ff fff1 	bl	440 <Board_UART_Print>
	Board_UART_Print("\r\n");
 45e:	4802      	ldr	r0, [pc, #8]	; (468 <Board_UART_Println+0x10>)
 460:	f7ff ffee 	bl	440 <Board_UART_Print>
}
 464:	bd08      	pop	{r3, pc}
 466:	46c0      	nop			; (mov r8, r8)
 468:	00000a58 	.word	0x00000a58

0000046c <Board_UART_SendBlocking>:
	itoa(num, str, base);
	Board_UART_Print(str);
	if (crlf) Board_UART_Print("\r\n");
}

void Board_UART_SendBlocking(const void *data, uint8_t num_bytes) {
 46c:	b508      	push	{r3, lr}
 46e:	1c03      	adds	r3, r0, #0
 470:	1c0a      	adds	r2, r1, #0
	Chip_UART_SendBlocking(LPC_USART, data, num_bytes);
 472:	4802      	ldr	r0, [pc, #8]	; (47c <Board_UART_SendBlocking+0x10>)
 474:	1c19      	adds	r1, r3, #0
 476:	f7ff ff06 	bl	286 <Chip_UART_SendBlocking>
}
 47a:	bd08      	pop	{r3, pc}
 47c:	40008000 	.word	0x40008000

00000480 <Board_UART_Read>:

int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
 480:	b508      	push	{r3, lr}
 482:	1c03      	adds	r3, r0, #0
 484:	1c0a      	adds	r2, r1, #0
	return Chip_UART_Read(LPC_USART, data, num_bytes);
 486:	4803      	ldr	r0, [pc, #12]	; (494 <Board_UART_Read+0x14>)
 488:	1c19      	adds	r1, r3, #0
 48a:	f7ff ff0e 	bl	2aa <Chip_UART_Read>
 48e:	b240      	sxtb	r0, r0
}
 490:	bd08      	pop	{r3, pc}
 492:	46c0      	nop			; (mov r8, r8)
 494:	40008000 	.word	0x40008000

00000498 <Board_CAN_Init>:

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {
 498:	b5f0      	push	{r4, r5, r6, r7, lr}
 49a:	b08f      	sub	sp, #60	; 0x3c

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 49c:	9308      	str	r3, [sp, #32]
 49e:	2300      	movs	r3, #0
 4a0:	9309      	str	r3, [sp, #36]	; 0x24
 4a2:	930a      	str	r3, [sp, #40]	; 0x28
 4a4:	930b      	str	r3, [sp, #44]	; 0x2c
 4a6:	930c      	str	r3, [sp, #48]	; 0x30
 4a8:	930d      	str	r3, [sp, #52]	; 0x34
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 4aa:	4b2f      	ldr	r3, [pc, #188]	; (568 <Board_CAN_Init+0xd0>)
 4ac:	9106      	str	r1, [sp, #24]
 4ae:	9207      	str	r2, [sp, #28]
 4b0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 4b2:	2280      	movs	r2, #128	; 0x80
 4b4:	0292      	lsls	r2, r2, #10
 4b6:	430a      	orrs	r2, r1

int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
	return Chip_UART_Read(LPC_USART, data, num_bytes);
}

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {
 4b8:	1c04      	adds	r4, r0, #0
 4ba:	67da      	str	r2, [r3, #124]	; 0x7c
		NULL,
	};

	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
 4bc:	f7ff fe4a 	bl	154 <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baudrate;
 4c0:	1c21      	adds	r1, r4, #0
 4c2:	f000 f9a3 	bl	80c <__aeabi_uidiv>
 4c6:	9000      	str	r0, [sp, #0]
 4c8:	9804      	ldr	r0, [sp, #16]
 4ca:	9c05      	ldr	r4, [sp, #20]
 4cc:	4684      	mov	ip, r0
 4ce:	2301      	movs	r3, #1
 4d0:	2203      	movs	r2, #3
 4d2:	435a      	muls	r2, r3
 4d4:	1e58      	subs	r0, r3, #1
 4d6:	9202      	str	r2, [sp, #8]
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 4d8:	1c16      	adds	r6, r2, #0
 4da:	9003      	str	r0, [sp, #12]
 4dc:	1c1d      	adds	r5, r3, #0
 4de:	2200      	movs	r2, #0
	clk_per_bit = pClk / baudrate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
 4e0:	1c37      	adds	r7, r6, #0
 4e2:	2103      	movs	r1, #3
 4e4:	9800      	ldr	r0, [sp, #0]
 4e6:	42b8      	cmp	r0, r7
 4e8:	d113      	bne.n	512 <Board_CAN_Init+0x7a>
					segs -= 3;
 4ea:	3903      	subs	r1, #3
					seg1 = segs / 2;
 4ec:	084c      	lsrs	r4, r1, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 4ee:	0227      	lsls	r7, r4, #8
 4f0:	4317      	orrs	r7, r2
 4f2:	46bc      	mov	ip, r7
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
 4f4:	1e27      	subs	r7, r4, #0
 4f6:	2f03      	cmp	r7, #3
 4f8:	d900      	bls.n	4fc <Board_CAN_Init+0x64>
 4fa:	2703      	movs	r7, #3
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
 4fc:	1b09      	subs	r1, r1, r4
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 4fe:	2407      	movs	r4, #7
 500:	4660      	mov	r0, ip
 502:	400c      	ands	r4, r1
 504:	01bf      	lsls	r7, r7, #6
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 506:	9903      	ldr	r1, [sp, #12]
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 508:	4307      	orrs	r7, r0
 50a:	0324      	lsls	r4, r4, #12
 50c:	433c      	orrs	r4, r7
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 50e:	468c      	mov	ip, r1
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
					break;
 510:	e003      	b.n	51a <Board_CAN_Init+0x82>

	clk_per_bit = pClk / baudrate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
 512:	3101      	adds	r1, #1
 514:	197f      	adds	r7, r7, r5
 516:	2912      	cmp	r1, #18
 518:	d1e4      	bne.n	4e4 <Board_CAN_Init+0x4c>
 51a:	9f02      	ldr	r7, [sp, #8]
 51c:	3201      	adds	r2, #1
 51e:	18ed      	adds	r5, r5, r3
 520:	19f6      	adds	r6, r6, r7
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baudrate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
 522:	2a20      	cmp	r2, #32
 524:	d1dc      	bne.n	4e0 <Board_CAN_Init+0x48>
 526:	3301      	adds	r3, #1
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baudrate;

	for (div = 0; div <= 15; div++) {
 528:	2b11      	cmp	r3, #17
 52a:	d1d1      	bne.n	4d0 <Board_CAN_Init+0x38>
 52c:	9405      	str	r4, [sp, #20]
			}
		}
	}

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 52e:	4c0f      	ldr	r4, [pc, #60]	; (56c <Board_CAN_Init+0xd4>)
 530:	4661      	mov	r1, ip
 532:	6823      	ldr	r3, [r4, #0]
 534:	9104      	str	r1, [sp, #16]
 536:	689b      	ldr	r3, [r3, #8]
 538:	a804      	add	r0, sp, #16
 53a:	2101      	movs	r1, #1
 53c:	681b      	ldr	r3, [r3, #0]
 53e:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
 540:	6823      	ldr	r3, [r4, #0]
 542:	a806      	add	r0, sp, #24
 544:	689b      	ldr	r3, [r3, #8]
 546:	69db      	ldr	r3, [r3, #28]
 548:	4798      	blx	r3

#ifdef CAN_LOOP_BACK
	LPC_CCAN->CANCTRL |= (1 << 7); //Enable TEST Register
 54a:	4b09      	ldr	r3, [pc, #36]	; (570 <Board_CAN_Init+0xd8>)
 54c:	2180      	movs	r1, #128	; 0x80
 54e:	681a      	ldr	r2, [r3, #0]
 550:	430a      	orrs	r2, r1
 552:	601a      	str	r2, [r3, #0]
	LPC_CCAN->CANTEST |= (1 << 3) | (1 << 4); // BASIC, SILENT, LOOPBACK
 554:	695a      	ldr	r2, [r3, #20]
 556:	2118      	movs	r1, #24
 558:	430a      	orrs	r2, r1
 55a:	615a      	str	r2, [r3, #20]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 55c:	4b05      	ldr	r3, [pc, #20]	; (574 <Board_CAN_Init+0xdc>)
 55e:	2280      	movs	r2, #128	; 0x80
 560:	0192      	lsls	r2, r2, #6
 562:	601a      	str	r2, [r3, #0]
#endif

	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);
 564:	b00f      	add	sp, #60	; 0x3c
 566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 568:	40048004 	.word	0x40048004
 56c:	1fff1ff8 	.word	0x1fff1ff8
 570:	40050000 	.word	0x40050000
 574:	e000e100 	.word	0xe000e100

00000578 <CAN_tx>:
 * CAN transmit callback executed by the Callback handler after
 * a CAN message has been transmitted 
 * @param msg_obj_num the msg_obj number that transmitted a message
 */
void CAN_tx(uint8_t msg_obj_num) {
}
 578:	4770      	bx	lr
	...

0000057c <CAN_error>:
 * an error has occured on the CAN bus
 * 
 * @param error_info Number describing CAN error
 */
void CAN_error(uint32_t error_info) {
	CAN_error_flag = true;
 57c:	4b02      	ldr	r3, [pc, #8]	; (588 <CAN_error+0xc>)
 57e:	2201      	movs	r2, #1
 580:	701a      	strb	r2, [r3, #0]
	CAN_error_info = error_info;
 582:	4b02      	ldr	r3, [pc, #8]	; (58c <CAN_error+0x10>)
 584:	6018      	str	r0, [r3, #0]
}
 586:	4770      	bx	lr
 588:	10000138 	.word	0x10000138
 58c:	10000120 	.word	0x10000120

00000590 <CAN_rx>:

/**	
 * CAN receive callback executed by the Callback handler after a CAN message has been received 
 * @param msg_obj_num the msg_obj number that received a message
 */
void CAN_rx(uint8_t msg_obj_num) {
 590:	b538      	push	{r3, r4, r5, lr}
 592:	1c05      	adds	r5, r0, #0
	Board_UART_Println(":)");
 594:	4808      	ldr	r0, [pc, #32]	; (5b8 <CAN_rx+0x28>)
 596:	f7ff ff5f 	bl	458 <Board_UART_Println>
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 59a:	4c08      	ldr	r4, [pc, #32]	; (5bc <CAN_rx+0x2c>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 59c:	4b08      	ldr	r3, [pc, #32]	; (5c0 <CAN_rx+0x30>)
 * @param msg_obj_num the msg_obj number that received a message
 */
void CAN_rx(uint8_t msg_obj_num) {
	Board_UART_Println(":)");
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 59e:	7465      	strb	r5, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 5a0:	681b      	ldr	r3, [r3, #0]
 5a2:	1c20      	adds	r0, r4, #0
 5a4:	689b      	ldr	r3, [r3, #8]
 5a6:	68db      	ldr	r3, [r3, #12]
 5a8:	4798      	blx	r3
	if (msg_obj_num == 1) {
 5aa:	2d01      	cmp	r5, #1
 5ac:	d103      	bne.n	5b6 <CAN_rx+0x26>
		RingBuffer_Insert(&CAN_rx_buffer, &msg_obj);
 5ae:	4805      	ldr	r0, [pc, #20]	; (5c4 <CAN_rx+0x34>)
 5b0:	1c21      	adds	r1, r4, #0
 5b2:	f7ff fe17 	bl	1e4 <RingBuffer_Insert>
	}
}
 5b6:	bd38      	pop	{r3, r4, r5, pc}
 5b8:	00000a5b 	.word	0x00000a5b
 5bc:	10000124 	.word	0x10000124
 5c0:	1fff1ff8 	.word	0x1fff1ff8
 5c4:	10000104 	.word	0x10000104

000005c8 <main>:
// Interrupt Service Routines

// -------------------------------------------------------------
// Main Program Loop

int main(void) {
 5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 5ca:	b087      	sub	sp, #28

	//---------------
	// Initialize SysTick Timer to generate millisecond count
	if (Board_SysTick_Init()) {
 5cc:	f7ff feea 	bl	3a4 <Board_SysTick_Init>
 5d0:	1e04      	subs	r4, r0, #0
 5d2:	d000      	beq.n	5d6 <main+0xe>
 5d4:	e7fe      	b.n	5d4 <main+0xc>
		while(1);
	}

	//---------------
	// Initialize GPIO and LED as output
	Board_LEDs_Init();
 5d6:	f7ff ff09 	bl	3ec <Board_LEDs_Init>
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 5da:	4a51      	ldr	r2, [pc, #324]	; (720 <main+0x158>)
 5dc:	2180      	movs	r1, #128	; 0x80
 5de:	2380      	movs	r3, #128	; 0x80
 5e0:	00c9      	lsls	r1, r1, #3
 5e2:	015b      	lsls	r3, r3, #5
	Chip_GPIO_SetPinState(LPC_GPIO, LED0, true);

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 5e4:	2096      	movs	r0, #150	; 0x96
 5e6:	50d1      	str	r1, [r2, r3]
 5e8:	0180      	lsls	r0, r0, #6
 5ea:	f7ff ff0d 	bl	408 <Board_UART_Init>
	Board_UART_Println("Started up");
 5ee:	484d      	ldr	r0, [pc, #308]	; (724 <main+0x15c>)
 5f0:	f7ff ff32 	bl	458 <Board_UART_Println>

	//---------------
	// Initialize CAN  and CAN Ring Buffer

	RingBuffer_Init(&CAN_rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), BUFFER_SIZE);
 5f4:	4f4c      	ldr	r7, [pc, #304]	; (728 <main+0x160>)
 5f6:	494d      	ldr	r1, [pc, #308]	; (72c <main+0x164>)
 5f8:	2214      	movs	r2, #20
 5fa:	2308      	movs	r3, #8
 5fc:	1c38      	adds	r0, r7, #0
 5fe:	f7ff fde9 	bl	1d4 <RingBuffer_Init>
	RingBuffer_Flush(&CAN_rx_buffer);

	Board_CAN_Init(CCAN_BAUD_RATE, CAN_rx, CAN_tx, CAN_error);
 602:	484b      	ldr	r0, [pc, #300]	; (730 <main+0x168>)
 604:	4b4b      	ldr	r3, [pc, #300]	; (734 <main+0x16c>)
 606:	494c      	ldr	r1, [pc, #304]	; (738 <main+0x170>)
 608:	4a4c      	ldr	r2, [pc, #304]	; (73c <main+0x174>)
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
 60a:	613c      	str	r4, [r7, #16]
 60c:	60fc      	str	r4, [r7, #12]
 60e:	f7ff ff43 	bl	498 <Board_CAN_Init>
		mode_id == 0xa0c for msgobj to accept message

	*/

	// /* Configure message object 1 to receive all 11-bit messages */
	msg_obj.msgobj = 1;
 612:	4d4b      	ldr	r5, [pc, #300]	; (740 <main+0x178>)
 614:	2301      	movs	r3, #1
	msg_obj.mode_id = 0x000;
 616:	602c      	str	r4, [r5, #0]
	msg_obj.mask = 0x000;
 618:	606c      	str	r4, [r5, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 61a:	4c4a      	ldr	r4, [pc, #296]	; (744 <main+0x17c>)
		mode_id == 0xa0c for msgobj to accept message

	*/

	// /* Configure message object 1 to receive all 11-bit messages */
	msg_obj.msgobj = 1;
 61c:	746b      	strb	r3, [r5, #17]
	msg_obj.mode_id = 0x000;
	msg_obj.mask = 0x000;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 61e:	6823      	ldr	r3, [r4, #0]
 620:	1c28      	adds	r0, r5, #0
 622:	689b      	ldr	r3, [r3, #8]
 624:	689b      	ldr	r3, [r3, #8]
 626:	4798      	blx	r3

	while (1) {
		uint8_t count;
		if ((count = Board_UART_Read(UART_rx_buffer, BUFFER_SIZE)) != 0) {
 628:	4c47      	ldr	r4, [pc, #284]	; (748 <main+0x180>)
 62a:	2108      	movs	r1, #8
 62c:	1c20      	adds	r0, r4, #0
 62e:	f7ff ff27 	bl	480 <Board_UART_Read>
 632:	b2c1      	uxtb	r1, r0
 634:	2900      	cmp	r1, #0
 636:	d053      	beq.n	6e0 <main+0x118>
			Board_UART_SendBlocking(UART_rx_buffer, count); // Echo user input
 638:	1c20      	adds	r0, r4, #0
 63a:	f7ff ff17 	bl	46c <Board_UART_SendBlocking>
			switch (UART_rx_buffer[0]) {
 63e:	7823      	ldrb	r3, [r4, #0]
 640:	2b73      	cmp	r3, #115	; 0x73
 642:	d03d      	beq.n	6c0 <main+0xf8>
 644:	2b74      	cmp	r3, #116	; 0x74
 646:	d039      	beq.n	6bc <main+0xf4>
 648:	2b69      	cmp	r3, #105	; 0x69
 64a:	d149      	bne.n	6e0 <main+0x118>
					LPC_CCAN_API->can_transmit(&msg_obj);
					Board_UART_Println("\r\nSent CAN Message");

					break;
				case 'i':
					Board_UART_Print("\r\nCANCTRL: ");
 64c:	483f      	ldr	r0, [pc, #252]	; (74c <main+0x184>)
 64e:	f7ff fef7 	bl	440 <Board_UART_Print>
					itoa(LPC_CCAN->CANCTRL, str, 2);
 652:	4e3f      	ldr	r6, [pc, #252]	; (750 <main+0x188>)
 654:	4c3f      	ldr	r4, [pc, #252]	; (754 <main+0x18c>)
 656:	2202      	movs	r2, #2
 658:	1c21      	adds	r1, r4, #0
 65a:	6830      	ldr	r0, [r6, #0]
 65c:	f7ff fe58 	bl	310 <itoa>
					Board_UART_Print(str);
 660:	1c20      	adds	r0, r4, #0
 662:	f7ff feed 	bl	440 <Board_UART_Print>
					Board_UART_Print(" CANTEST: ");
 666:	483c      	ldr	r0, [pc, #240]	; (758 <main+0x190>)
 668:	f7ff feea 	bl	440 <Board_UART_Print>
					itoa(LPC_CCAN->CANTEST, str, 2);
 66c:	1c21      	adds	r1, r4, #0
 66e:	2202      	movs	r2, #2
 670:	6970      	ldr	r0, [r6, #20]
 672:	f7ff fe4d 	bl	310 <itoa>
					Board_UART_Println(str);
 676:	1c20      	adds	r0, r4, #0
 678:	f7ff feee 	bl	458 <Board_UART_Println>
					Board_UART_Print("CANSTAT: ");
 67c:	4837      	ldr	r0, [pc, #220]	; (75c <main+0x194>)
 67e:	f7ff fedf 	bl	440 <Board_UART_Print>
					itoa(LPC_CCAN->CANSTAT, str, 2);
 682:	1c21      	adds	r1, r4, #0
 684:	2202      	movs	r2, #2
 686:	6870      	ldr	r0, [r6, #4]
 688:	f7ff fe42 	bl	310 <itoa>
					Board_UART_Print(str);
 68c:	1c20      	adds	r0, r4, #0
 68e:	f7ff fed7 	bl	440 <Board_UART_Print>
					Board_UART_Print(" CANINT: ");
 692:	4833      	ldr	r0, [pc, #204]	; (760 <main+0x198>)
 694:	f7ff fed4 	bl	440 <Board_UART_Print>
					itoa(LPC_CCAN->CANINT, str, 2);
 698:	1c21      	adds	r1, r4, #0
 69a:	2202      	movs	r2, #2
 69c:	6930      	ldr	r0, [r6, #16]
 69e:	f7ff fe37 	bl	310 <itoa>
					Board_UART_Println(str);
 6a2:	1c20      	adds	r0, r4, #0
 6a4:	f7ff fed8 	bl	458 <Board_UART_Println>
					Board_UART_Print("CANEC: ");
 6a8:	482e      	ldr	r0, [pc, #184]	; (764 <main+0x19c>)
 6aa:	f7ff fec9 	bl	440 <Board_UART_Print>
					itoa(LPC_CCAN->CANEC, str, 2);
 6ae:	68b0      	ldr	r0, [r6, #8]
 6b0:	1c21      	adds	r1, r4, #0
 6b2:	2202      	movs	r2, #2
 6b4:	f7ff fe2c 	bl	310 <itoa>
					Board_UART_Println(str);
 6b8:	1c20      	adds	r0, r4, #0
 6ba:	e00f      	b.n	6dc <main+0x114>
		uint8_t count;
		if ((count = Board_UART_Read(UART_rx_buffer, BUFFER_SIZE)) != 0) {
			Board_UART_SendBlocking(UART_rx_buffer, count); // Echo user input
			switch (UART_rx_buffer[0]) {
				case 't': // Send a hello world
					Board_UART_Println("\r\nHello World"); 
 6bc:	482a      	ldr	r0, [pc, #168]	; (768 <main+0x1a0>)
 6be:	e00d      	b.n	6dc <main+0x114>
					break;
				case 's': // Transmit a message
					msg_obj.msgobj = 2;
 6c0:	2302      	movs	r3, #2
 6c2:	746b      	strb	r3, [r5, #17]
					msg_obj.mode_id = 0x001;
 6c4:	2301      	movs	r3, #1
					msg_obj.dlc = 1;
 6c6:	742b      	strb	r3, [r5, #16]
				case 't': // Send a hello world
					Board_UART_Println("\r\nHello World"); 
					break;
				case 's': // Transmit a message
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x001;
 6c8:	602b      	str	r3, [r5, #0]
					msg_obj.dlc = 1;
					msg_obj.data[0] = 0xFF;

					LPC_CCAN_API->can_transmit(&msg_obj);
 6ca:	4a1e      	ldr	r2, [pc, #120]	; (744 <main+0x17c>)
					break;
				case 's': // Transmit a message
					msg_obj.msgobj = 2;
					msg_obj.mode_id = 0x001;
					msg_obj.dlc = 1;
					msg_obj.data[0] = 0xFF;
 6cc:	23ff      	movs	r3, #255	; 0xff
 6ce:	722b      	strb	r3, [r5, #8]

					LPC_CCAN_API->can_transmit(&msg_obj);
 6d0:	6813      	ldr	r3, [r2, #0]
 6d2:	1c28      	adds	r0, r5, #0
 6d4:	689b      	ldr	r3, [r3, #8]
 6d6:	691b      	ldr	r3, [r3, #16]
 6d8:	4798      	blx	r3
					Board_UART_Println("\r\nSent CAN Message");
 6da:	4824      	ldr	r0, [pc, #144]	; (76c <main+0x1a4>)
					Board_UART_Print(" CANINT: ");
					itoa(LPC_CCAN->CANINT, str, 2);
					Board_UART_Println(str);
					Board_UART_Print("CANEC: ");
					itoa(LPC_CCAN->CANEC, str, 2);
					Board_UART_Println(str);
 6dc:	f7ff febc 	bl	458 <Board_UART_Println>
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is empty, otherwise 0
 */
STATIC INLINE int RingBuffer_IsEmpty(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) == RB_VTAIL(RingBuff);
 6e0:	68fa      	ldr	r2, [r7, #12]
 6e2:	693b      	ldr	r3, [r7, #16]
					break;
			}
		}

		if (!RingBuffer_IsEmpty(&CAN_rx_buffer)) {
 6e4:	429a      	cmp	r2, r3
 6e6:	d006      	beq.n	6f6 <main+0x12e>
			CCAN_MSG_OBJ_T temp_msg;
			RingBuffer_Pop(&CAN_rx_buffer, &temp_msg);
 6e8:	1c38      	adds	r0, r7, #0
 6ea:	a901      	add	r1, sp, #4
 6ec:	f7ff fd91 	bl	212 <RingBuffer_Pop>
			Board_UART_Println("Received Message");
 6f0:	481f      	ldr	r0, [pc, #124]	; (770 <main+0x1a8>)
 6f2:	f7ff feb1 	bl	458 <Board_UART_Println>
	// 		LPC_CCAN_API->can_transmit(&msg_obj);
	// 	}

	// 	*/

		if (CAN_error_flag) {
 6f6:	4c1f      	ldr	r4, [pc, #124]	; (774 <main+0x1ac>)
 6f8:	7823      	ldrb	r3, [r4, #0]
 6fa:	2b00      	cmp	r3, #0
 6fc:	d094      	beq.n	628 <main+0x60>
			Board_UART_Print("CAN Error. Info: ");
 6fe:	481e      	ldr	r0, [pc, #120]	; (778 <main+0x1b0>)
 700:	f7ff fe9e 	bl	440 <Board_UART_Print>
			CAN_error_flag = false;
 704:	2300      	movs	r3, #0
 706:	7023      	strb	r3, [r4, #0]

			itoa(CAN_error_info, str, 2);
 708:	4c12      	ldr	r4, [pc, #72]	; (754 <main+0x18c>)
 70a:	4b1c      	ldr	r3, [pc, #112]	; (77c <main+0x1b4>)
 70c:	1c21      	adds	r1, r4, #0
 70e:	6818      	ldr	r0, [r3, #0]
 710:	2202      	movs	r2, #2
 712:	f7ff fdfd 	bl	310 <itoa>
			Board_UART_Println(str);
 716:	1c20      	adds	r0, r4, #0
 718:	f7ff fe9e 	bl	458 <Board_UART_Println>
 71c:	e784      	b.n	628 <main+0x60>
 71e:	46c0      	nop			; (mov r8, r8)
 720:	50020000 	.word	0x50020000
 724:	00000a5e 	.word	0x00000a5e
 728:	10000104 	.word	0x10000104
 72c:	1000013c 	.word	0x1000013c
 730:	0007a120 	.word	0x0007a120
 734:	0000057d 	.word	0x0000057d
 738:	00000591 	.word	0x00000591
 73c:	00000579 	.word	0x00000579
 740:	10000124 	.word	0x10000124
 744:	1fff1ff8 	.word	0x1fff1ff8
 748:	10000118 	.word	0x10000118
 74c:	00000a8a 	.word	0x00000a8a
 750:	40050000 	.word	0x40050000
 754:	100001dc 	.word	0x100001dc
 758:	00000a96 	.word	0x00000a96
 75c:	00000aa1 	.word	0x00000aa1
 760:	00000aab 	.word	0x00000aab
 764:	00000ab5 	.word	0x00000ab5
 768:	00000a69 	.word	0x00000a69
 76c:	00000a77 	.word	0x00000a77
 770:	00000abd 	.word	0x00000abd
 774:	10000138 	.word	0x10000138
 778:	00000ace 	.word	0x00000ace
 77c:	10000120 	.word	0x10000120

00000780 <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 780:	4b1f      	ldr	r3, [pc, #124]	; (800 <SystemInit+0x80>)
 782:	228e      	movs	r2, #142	; 0x8e
 784:	0092      	lsls	r2, r2, #2
 786:	5899      	ldr	r1, [r3, r2]
 788:	2020      	movs	r0, #32
 78a:	4381      	bics	r1, r0
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
 78c:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 78e:	5099      	str	r1, [r3, r2]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
 790:	2200      	movs	r2, #0
 792:	621a      	str	r2, [r3, #32]
 794:	22c8      	movs	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 796:	46c0      	nop			; (mov r8, r8)
 798:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
 79a:	2a00      	cmp	r2, #0
 79c:	d1fb      	bne.n	796 <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 79e:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 7a0:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 7a2:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
 7a4:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
 7a6:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
 7a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 7aa:	4a15      	ldr	r2, [pc, #84]	; (800 <SystemInit+0x80>)
 7ac:	07c8      	lsls	r0, r1, #31
 7ae:	d5fb      	bpl.n	7a8 <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 7b0:	2161      	movs	r1, #97	; 0x61
 7b2:	6091      	str	r1, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 7b4:	218e      	movs	r1, #142	; 0x8e
 7b6:	0089      	lsls	r1, r1, #2
 7b8:	5850      	ldr	r0, [r2, r1]
 7ba:	2480      	movs	r4, #128	; 0x80
 7bc:	43a0      	bics	r0, r4
 7be:	5050      	str	r0, [r2, r1]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
 7c0:	68d8      	ldr	r0, [r3, #12]
 7c2:	2101      	movs	r1, #1
 7c4:	4a0e      	ldr	r2, [pc, #56]	; (800 <SystemInit+0x80>)
 7c6:	4208      	tst	r0, r1
 7c8:	d0fa      	beq.n	7c0 <SystemInit+0x40>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 7ca:	2000      	movs	r0, #0
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 7cc:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 7ce:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 7d0:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 7d2:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 7d4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 7d6:	2101      	movs	r1, #1
 7d8:	4a09      	ldr	r2, [pc, #36]	; (800 <SystemInit+0x80>)
 7da:	4208      	tst	r0, r1
 7dc:	d0fa      	beq.n	7d4 <SystemInit+0x54>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 7de:	238e      	movs	r3, #142	; 0x8e
 7e0:	009b      	lsls	r3, r3, #2
 7e2:	58d4      	ldr	r4, [r2, r3]
 7e4:	2080      	movs	r0, #128	; 0x80
 7e6:	00c0      	lsls	r0, r0, #3
 7e8:	4320      	orrs	r0, r4
 7ea:	50d0      	str	r0, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 7ec:	58d4      	ldr	r4, [r2, r3]
 7ee:	2080      	movs	r0, #128	; 0x80
 7f0:	4088      	lsls	r0, r1
 7f2:	4320      	orrs	r0, r4
 7f4:	50d0      	str	r0, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 7f6:	6791      	str	r1, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 7f8:	4b02      	ldr	r3, [pc, #8]	; (804 <SystemInit+0x84>)
 7fa:	4a03      	ldr	r2, [pc, #12]	; (808 <SystemInit+0x88>)
 7fc:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 7fe:	bd10      	pop	{r4, pc}
 800:	40048000 	.word	0x40048000
 804:	40048004 	.word	0x40048004
 808:	0001005f 	.word	0x0001005f

0000080c <__aeabi_uidiv>:
 80c:	2900      	cmp	r1, #0
 80e:	d034      	beq.n	87a <.udivsi3_skip_div0_test+0x6a>

00000810 <.udivsi3_skip_div0_test>:
 810:	2301      	movs	r3, #1
 812:	2200      	movs	r2, #0
 814:	b410      	push	{r4}
 816:	4288      	cmp	r0, r1
 818:	d32c      	bcc.n	874 <.udivsi3_skip_div0_test+0x64>
 81a:	2401      	movs	r4, #1
 81c:	0724      	lsls	r4, r4, #28
 81e:	42a1      	cmp	r1, r4
 820:	d204      	bcs.n	82c <.udivsi3_skip_div0_test+0x1c>
 822:	4281      	cmp	r1, r0
 824:	d202      	bcs.n	82c <.udivsi3_skip_div0_test+0x1c>
 826:	0109      	lsls	r1, r1, #4
 828:	011b      	lsls	r3, r3, #4
 82a:	e7f8      	b.n	81e <.udivsi3_skip_div0_test+0xe>
 82c:	00e4      	lsls	r4, r4, #3
 82e:	42a1      	cmp	r1, r4
 830:	d204      	bcs.n	83c <.udivsi3_skip_div0_test+0x2c>
 832:	4281      	cmp	r1, r0
 834:	d202      	bcs.n	83c <.udivsi3_skip_div0_test+0x2c>
 836:	0049      	lsls	r1, r1, #1
 838:	005b      	lsls	r3, r3, #1
 83a:	e7f8      	b.n	82e <.udivsi3_skip_div0_test+0x1e>
 83c:	4288      	cmp	r0, r1
 83e:	d301      	bcc.n	844 <.udivsi3_skip_div0_test+0x34>
 840:	1a40      	subs	r0, r0, r1
 842:	431a      	orrs	r2, r3
 844:	084c      	lsrs	r4, r1, #1
 846:	42a0      	cmp	r0, r4
 848:	d302      	bcc.n	850 <.udivsi3_skip_div0_test+0x40>
 84a:	1b00      	subs	r0, r0, r4
 84c:	085c      	lsrs	r4, r3, #1
 84e:	4322      	orrs	r2, r4
 850:	088c      	lsrs	r4, r1, #2
 852:	42a0      	cmp	r0, r4
 854:	d302      	bcc.n	85c <.udivsi3_skip_div0_test+0x4c>
 856:	1b00      	subs	r0, r0, r4
 858:	089c      	lsrs	r4, r3, #2
 85a:	4322      	orrs	r2, r4
 85c:	08cc      	lsrs	r4, r1, #3
 85e:	42a0      	cmp	r0, r4
 860:	d302      	bcc.n	868 <.udivsi3_skip_div0_test+0x58>
 862:	1b00      	subs	r0, r0, r4
 864:	08dc      	lsrs	r4, r3, #3
 866:	4322      	orrs	r2, r4
 868:	2800      	cmp	r0, #0
 86a:	d003      	beq.n	874 <.udivsi3_skip_div0_test+0x64>
 86c:	091b      	lsrs	r3, r3, #4
 86e:	d001      	beq.n	874 <.udivsi3_skip_div0_test+0x64>
 870:	0909      	lsrs	r1, r1, #4
 872:	e7e3      	b.n	83c <.udivsi3_skip_div0_test+0x2c>
 874:	1c10      	adds	r0, r2, #0
 876:	bc10      	pop	{r4}
 878:	4770      	bx	lr
 87a:	2800      	cmp	r0, #0
 87c:	d001      	beq.n	882 <.udivsi3_skip_div0_test+0x72>
 87e:	2000      	movs	r0, #0
 880:	43c0      	mvns	r0, r0
 882:	b407      	push	{r0, r1, r2}
 884:	4802      	ldr	r0, [pc, #8]	; (890 <.udivsi3_skip_div0_test+0x80>)
 886:	a102      	add	r1, pc, #8	; (adr r1, 890 <.udivsi3_skip_div0_test+0x80>)
 888:	1840      	adds	r0, r0, r1
 88a:	9002      	str	r0, [sp, #8]
 88c:	bd03      	pop	{r0, r1, pc}
 88e:	46c0      	nop			; (mov r8, r8)
 890:	000000d9 	.word	0x000000d9

00000894 <__aeabi_uidivmod>:
 894:	2900      	cmp	r1, #0
 896:	d0f0      	beq.n	87a <.udivsi3_skip_div0_test+0x6a>
 898:	b503      	push	{r0, r1, lr}
 89a:	f7ff ffb9 	bl	810 <.udivsi3_skip_div0_test>
 89e:	bc0e      	pop	{r1, r2, r3}
 8a0:	4342      	muls	r2, r0
 8a2:	1a89      	subs	r1, r1, r2
 8a4:	4718      	bx	r3
 8a6:	46c0      	nop			; (mov r8, r8)

000008a8 <__aeabi_idiv>:
 8a8:	2900      	cmp	r1, #0
 8aa:	d041      	beq.n	930 <.divsi3_skip_div0_test+0x84>

000008ac <.divsi3_skip_div0_test>:
 8ac:	b410      	push	{r4}
 8ae:	1c04      	adds	r4, r0, #0
 8b0:	404c      	eors	r4, r1
 8b2:	46a4      	mov	ip, r4
 8b4:	2301      	movs	r3, #1
 8b6:	2200      	movs	r2, #0
 8b8:	2900      	cmp	r1, #0
 8ba:	d500      	bpl.n	8be <.divsi3_skip_div0_test+0x12>
 8bc:	4249      	negs	r1, r1
 8be:	2800      	cmp	r0, #0
 8c0:	d500      	bpl.n	8c4 <.divsi3_skip_div0_test+0x18>
 8c2:	4240      	negs	r0, r0
 8c4:	4288      	cmp	r0, r1
 8c6:	d32c      	bcc.n	922 <.divsi3_skip_div0_test+0x76>
 8c8:	2401      	movs	r4, #1
 8ca:	0724      	lsls	r4, r4, #28
 8cc:	42a1      	cmp	r1, r4
 8ce:	d204      	bcs.n	8da <.divsi3_skip_div0_test+0x2e>
 8d0:	4281      	cmp	r1, r0
 8d2:	d202      	bcs.n	8da <.divsi3_skip_div0_test+0x2e>
 8d4:	0109      	lsls	r1, r1, #4
 8d6:	011b      	lsls	r3, r3, #4
 8d8:	e7f8      	b.n	8cc <.divsi3_skip_div0_test+0x20>
 8da:	00e4      	lsls	r4, r4, #3
 8dc:	42a1      	cmp	r1, r4
 8de:	d204      	bcs.n	8ea <.divsi3_skip_div0_test+0x3e>
 8e0:	4281      	cmp	r1, r0
 8e2:	d202      	bcs.n	8ea <.divsi3_skip_div0_test+0x3e>
 8e4:	0049      	lsls	r1, r1, #1
 8e6:	005b      	lsls	r3, r3, #1
 8e8:	e7f8      	b.n	8dc <.divsi3_skip_div0_test+0x30>
 8ea:	4288      	cmp	r0, r1
 8ec:	d301      	bcc.n	8f2 <.divsi3_skip_div0_test+0x46>
 8ee:	1a40      	subs	r0, r0, r1
 8f0:	431a      	orrs	r2, r3
 8f2:	084c      	lsrs	r4, r1, #1
 8f4:	42a0      	cmp	r0, r4
 8f6:	d302      	bcc.n	8fe <.divsi3_skip_div0_test+0x52>
 8f8:	1b00      	subs	r0, r0, r4
 8fa:	085c      	lsrs	r4, r3, #1
 8fc:	4322      	orrs	r2, r4
 8fe:	088c      	lsrs	r4, r1, #2
 900:	42a0      	cmp	r0, r4
 902:	d302      	bcc.n	90a <.divsi3_skip_div0_test+0x5e>
 904:	1b00      	subs	r0, r0, r4
 906:	089c      	lsrs	r4, r3, #2
 908:	4322      	orrs	r2, r4
 90a:	08cc      	lsrs	r4, r1, #3
 90c:	42a0      	cmp	r0, r4
 90e:	d302      	bcc.n	916 <.divsi3_skip_div0_test+0x6a>
 910:	1b00      	subs	r0, r0, r4
 912:	08dc      	lsrs	r4, r3, #3
 914:	4322      	orrs	r2, r4
 916:	2800      	cmp	r0, #0
 918:	d003      	beq.n	922 <.divsi3_skip_div0_test+0x76>
 91a:	091b      	lsrs	r3, r3, #4
 91c:	d001      	beq.n	922 <.divsi3_skip_div0_test+0x76>
 91e:	0909      	lsrs	r1, r1, #4
 920:	e7e3      	b.n	8ea <.divsi3_skip_div0_test+0x3e>
 922:	1c10      	adds	r0, r2, #0
 924:	4664      	mov	r4, ip
 926:	2c00      	cmp	r4, #0
 928:	d500      	bpl.n	92c <.divsi3_skip_div0_test+0x80>
 92a:	4240      	negs	r0, r0
 92c:	bc10      	pop	{r4}
 92e:	4770      	bx	lr
 930:	2800      	cmp	r0, #0
 932:	d006      	beq.n	942 <.divsi3_skip_div0_test+0x96>
 934:	db03      	blt.n	93e <.divsi3_skip_div0_test+0x92>
 936:	2000      	movs	r0, #0
 938:	43c0      	mvns	r0, r0
 93a:	0840      	lsrs	r0, r0, #1
 93c:	e001      	b.n	942 <.divsi3_skip_div0_test+0x96>
 93e:	2080      	movs	r0, #128	; 0x80
 940:	0600      	lsls	r0, r0, #24
 942:	b407      	push	{r0, r1, r2}
 944:	4802      	ldr	r0, [pc, #8]	; (950 <.divsi3_skip_div0_test+0xa4>)
 946:	a102      	add	r1, pc, #8	; (adr r1, 950 <.divsi3_skip_div0_test+0xa4>)
 948:	1840      	adds	r0, r0, r1
 94a:	9002      	str	r0, [sp, #8]
 94c:	bd03      	pop	{r0, r1, pc}
 94e:	46c0      	nop			; (mov r8, r8)
 950:	00000019 	.word	0x00000019

00000954 <__aeabi_idivmod>:
 954:	2900      	cmp	r1, #0
 956:	d0eb      	beq.n	930 <.divsi3_skip_div0_test+0x84>
 958:	b503      	push	{r0, r1, lr}
 95a:	f7ff ffa7 	bl	8ac <.divsi3_skip_div0_test>
 95e:	bc0e      	pop	{r1, r2, r3}
 960:	4342      	muls	r2, r0
 962:	1a89      	subs	r1, r1, r2
 964:	4718      	bx	r3
 966:	46c0      	nop			; (mov r8, r8)

00000968 <__aeabi_idiv0>:
 968:	4770      	bx	lr
 96a:	46c0      	nop			; (mov r8, r8)

0000096c <memcpy>:
 96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 96e:	2a0f      	cmp	r2, #15
 970:	d935      	bls.n	9de <memcpy+0x72>
 972:	1c03      	adds	r3, r0, #0
 974:	430b      	orrs	r3, r1
 976:	079c      	lsls	r4, r3, #30
 978:	d135      	bne.n	9e6 <memcpy+0x7a>
 97a:	1c16      	adds	r6, r2, #0
 97c:	3e10      	subs	r6, #16
 97e:	0936      	lsrs	r6, r6, #4
 980:	0135      	lsls	r5, r6, #4
 982:	1945      	adds	r5, r0, r5
 984:	3510      	adds	r5, #16
 986:	1c0c      	adds	r4, r1, #0
 988:	1c03      	adds	r3, r0, #0
 98a:	6827      	ldr	r7, [r4, #0]
 98c:	601f      	str	r7, [r3, #0]
 98e:	6867      	ldr	r7, [r4, #4]
 990:	605f      	str	r7, [r3, #4]
 992:	68a7      	ldr	r7, [r4, #8]
 994:	609f      	str	r7, [r3, #8]
 996:	68e7      	ldr	r7, [r4, #12]
 998:	3410      	adds	r4, #16
 99a:	60df      	str	r7, [r3, #12]
 99c:	3310      	adds	r3, #16
 99e:	42ab      	cmp	r3, r5
 9a0:	d1f3      	bne.n	98a <memcpy+0x1e>
 9a2:	1c73      	adds	r3, r6, #1
 9a4:	011b      	lsls	r3, r3, #4
 9a6:	18c5      	adds	r5, r0, r3
 9a8:	18c9      	adds	r1, r1, r3
 9aa:	230f      	movs	r3, #15
 9ac:	4013      	ands	r3, r2
 9ae:	2b03      	cmp	r3, #3
 9b0:	d91b      	bls.n	9ea <memcpy+0x7e>
 9b2:	1f1c      	subs	r4, r3, #4
 9b4:	08a4      	lsrs	r4, r4, #2
 9b6:	3401      	adds	r4, #1
 9b8:	00a4      	lsls	r4, r4, #2
 9ba:	2300      	movs	r3, #0
 9bc:	58ce      	ldr	r6, [r1, r3]
 9be:	50ee      	str	r6, [r5, r3]
 9c0:	3304      	adds	r3, #4
 9c2:	42a3      	cmp	r3, r4
 9c4:	d1fa      	bne.n	9bc <memcpy+0x50>
 9c6:	18ed      	adds	r5, r5, r3
 9c8:	18c9      	adds	r1, r1, r3
 9ca:	2303      	movs	r3, #3
 9cc:	401a      	ands	r2, r3
 9ce:	d005      	beq.n	9dc <memcpy+0x70>
 9d0:	2300      	movs	r3, #0
 9d2:	5ccc      	ldrb	r4, [r1, r3]
 9d4:	54ec      	strb	r4, [r5, r3]
 9d6:	3301      	adds	r3, #1
 9d8:	4293      	cmp	r3, r2
 9da:	d1fa      	bne.n	9d2 <memcpy+0x66>
 9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 9de:	1c05      	adds	r5, r0, #0
 9e0:	2a00      	cmp	r2, #0
 9e2:	d1f5      	bne.n	9d0 <memcpy+0x64>
 9e4:	e7fa      	b.n	9dc <memcpy+0x70>
 9e6:	1c05      	adds	r5, r0, #0
 9e8:	e7f2      	b.n	9d0 <memcpy+0x64>
 9ea:	1c1a      	adds	r2, r3, #0
 9ec:	e7f8      	b.n	9e0 <memcpy+0x74>
 9ee:	46c0      	nop			; (mov r8, r8)

000009f0 <strlen>:
 9f0:	2300      	movs	r3, #0
 9f2:	5cc2      	ldrb	r2, [r0, r3]
 9f4:	3301      	adds	r3, #1
 9f6:	2a00      	cmp	r2, #0
 9f8:	d1fb      	bne.n	9f2 <strlen+0x2>
 9fa:	1e58      	subs	r0, r3, #1
 9fc:	4770      	bx	lr
 9fe:	46c0      	nop			; (mov r8, r8)

00000a00 <wdtOSCRate>:
 a00:	0000 0000 27c0 0009 0590 0010 5cc0 0015     .....'.......\..
 a10:	b3f0 001a 0b20 0020 9f00 0024 32e0 0029     .... . ...$..2).
 a20:	c6c0 002d 9750 0031 67e0 0035 3870 0039     ..-.P.1..g5.p89.
 a30:	0900 003d 1640 0040 2380 0043 30c0 0046     ..=.@.@..#C..0F.

00000a40 <digits.4181>:
 a40:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
 a50:	0000 0000                                   ....

00000a54 <OscRateIn>:
 a54:	0000 0000 0a0d 3a00 0029 7453 7261 6574     .......:).Starte
 a64:	2064 7075 0d00 480a 6c65 6f6c 5720 726f     d up...Hello Wor
 a74:	646c 0d00 530a 6e65 2074 4143 204e 654d     ld...Sent CAN Me
 a84:	7373 6761 0065 0a0d 4143 434e 5254 3a4c     ssage...CANCTRL:
 a94:	0020 4320 4e41 4554 5453 203a 4300 4e41      . CANTEST: .CAN
 aa4:	5453 5441 203a 2000 4143 494e 544e 203a     STAT: . CANINT: 
 ab4:	4300 4e41 4345 203a 5200 6365 6965 6576     .CANEC: .Receive
 ac4:	2064 654d 7373 6761 0065 4143 204e 7245     d Message.CAN Er
 ad4:	6f72 2e72 4920 666e 3a6f 0020               ror. Info: .
