
bin/BCM.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000d1 	.word	0x000000d1
   c:	000000d3 	.word	0x000000d3
	...
  2c:	000000d5 	.word	0x000000d5
	...
  38:	000000d7 	.word	0x000000d7
  3c:	0000030d 	.word	0x0000030d
  40:	000000db 	.word	0x000000db
  44:	000000db 	.word	0x000000db
  48:	000000db 	.word	0x000000db
  4c:	000000db 	.word	0x000000db
  50:	000000db 	.word	0x000000db
  54:	000000db 	.word	0x000000db
  58:	000000db 	.word	0x000000db
  5c:	000000db 	.word	0x000000db
  60:	000000db 	.word	0x000000db
  64:	000000db 	.word	0x000000db
  68:	000000db 	.word	0x000000db
  6c:	000000db 	.word	0x000000db
  70:	000000db 	.word	0x000000db
  74:	0000031d 	.word	0x0000031d
  78:	000000db 	.word	0x000000db
  7c:	000000db 	.word	0x000000db
  80:	000000db 	.word	0x000000db
  84:	000000db 	.word	0x000000db
  88:	000005a9 	.word	0x000005a9
  8c:	000000db 	.word	0x000000db
  90:	000000db 	.word	0x000000db
  94:	000000db 	.word	0x000000db
	...
  a0:	000000db 	.word	0x000000db
  a4:	000000db 	.word	0x000000db
  a8:	000000db 	.word	0x000000db
  ac:	00000000 	.word	0x00000000
  b0:	000000db 	.word	0x000000db
  b4:	000000db 	.word	0x000000db
  b8:	000000db 	.word	0x000000db
  bc:	000000db 	.word	0x000000db

000000c0 <Reset_Handler>:

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c0:	4801      	ldr	r0, [pc, #4]	; (c8 <Reset_Handler+0x8>)
    BLX     R0
  c2:	4780      	blx	r0
.if (RAM_MODE)
    LDR     R0,=main
  c4:	4801      	ldr	r0, [pc, #4]	; (cc <Reset_Handler+0xc>)
    BX      R0
  c6:	4700      	bx	r0

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
  c8:	00000731 	.word	0x00000731
    BLX     R0
.if (RAM_MODE)
    LDR     R0,=main
  cc:	000005d9 	.word	0x000005d9

000000d0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  d0:	e7fe      	b.n	d0 <NMI_Handler>

000000d2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  d2:	e7fe      	b.n	d2 <HardFault_Handler>

000000d4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  d4:	e7fe      	b.n	d4 <SVC_Handler>

000000d6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  d6:	e7fe      	b.n	d6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  d8:	e7fe      	b.n	d8 <PendSV_Handler+0x2>

000000da <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  da:	e7fe      	b.n	da <Default_Handler>

000000dc <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
  dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
  de:	f000 f853 	bl	188 <Chip_Clock_GetSystemClockRate>
  e2:	4b01      	ldr	r3, [pc, #4]	; (e8 <SystemCoreClockUpdate+0xc>)
  e4:	6018      	str	r0, [r3, #0]
}
  e6:	bd08      	pop	{r3, pc}
  e8:	10000100 	.word	0x10000100

000000ec <Chip_Clock_GetWDTOSCRate>:

#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
  ec:	b508      	push	{r3, lr}
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
  ee:	4b07      	ldr	r3, [pc, #28]	; (10c <Chip_Clock_GetWDTOSCRate+0x20>)
  f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f2:	231f      	movs	r3, #31
{
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
  f4:	05ca      	lsls	r2, r1, #23
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  f6:	0f12      	lsrs	r2, r2, #28
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
  f8:	4019      	ands	r1, r3

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
  fa:	4b05      	ldr	r3, [pc, #20]	; (110 <Chip_Clock_GetWDTOSCRate+0x24>)
  fc:	0092      	lsls	r2, r2, #2
  fe:	3101      	adds	r1, #1
 100:	0049      	lsls	r1, r1, #1
 102:	58d0      	ldr	r0, [r2, r3]
 104:	f000 fb5a 	bl	7bc <__aeabi_uidiv>

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
}
 108:	bd08      	pop	{r3, pc}
 10a:	46c0      	nop			; (mov r8, r8)
 10c:	40048000 	.word	0x40048000
 110:	00000a88 	.word	0x00000a88

00000114 <Chip_Clock_GetSystemPLLInClockRate>:
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 114:	4b06      	ldr	r3, [pc, #24]	; (130 <Chip_Clock_GetSystemPLLInClockRate+0x1c>)
 116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 118:	2303      	movs	r3, #3
 11a:	4013      	ands	r3, r2
 11c:	d005      	beq.n	12a <Chip_Clock_GetSystemPLLInClockRate+0x16>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
 11e:	2000      	movs	r0, #0
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 120:	2b01      	cmp	r3, #1
 122:	d103      	bne.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 124:	4b03      	ldr	r3, [pc, #12]	; (134 <Chip_Clock_GetSystemPLLInClockRate+0x20>)
 126:	6818      	ldr	r0, [r3, #0]
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_PLLCLKSRC_MAINOSC:
		clkRate = Chip_Clock_GetMainOscRate();
		break;
 128:	e000      	b.n	12c <Chip_Clock_GetSystemPLLInClockRate+0x18>
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
	case SYSCTL_PLLCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 12a:	4803      	ldr	r0, [pc, #12]	; (138 <Chip_Clock_GetSystemPLLInClockRate+0x24>)
	default:
		clkRate = 0;
	}

	return clkRate;
}
 12c:	4770      	bx	lr
 12e:	46c0      	nop			; (mov r8, r8)
 130:	40048000 	.word	0x40048000
 134:	00000ac8 	.word	0x00000ac8
 138:	00b71b00 	.word	0x00b71b00

0000013c <Chip_Clock_GetSystemPLLOutClockRate>:

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 13c:	4b04      	ldr	r3, [pc, #16]	; (150 <Chip_Clock_GetSystemPLLOutClockRate+0x14>)
	return clkRate;
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
 13e:	b510      	push	{r4, lr}
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 140:	689c      	ldr	r4, [r3, #8]
 142:	f7ff ffe7 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
}

/* Compute a PLL frequency */
STATIC uint32_t Chip_Clock_GetPLLFreq(uint32_t PLLReg, uint32_t inputRate)
{
	uint32_t msel = ((PLLReg & 0x1F) + 1);
 146:	231f      	movs	r3, #31
 148:	4023      	ands	r3, r4
 14a:	3301      	adds	r3, #1

	return inputRate * msel;
 14c:	4358      	muls	r0, r3
/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
								 Chip_Clock_GetSystemPLLInClockRate());
}
 14e:	bd10      	pop	{r4, pc}
 150:	40048000 	.word	0x40048000

00000154 <Chip_Clock_GetMainClockRate>:

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
 154:	b508      	push	{r3, lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 156:	4b0a      	ldr	r3, [pc, #40]	; (180 <Chip_Clock_GetMainClockRate+0x2c>)
 158:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 15a:	2303      	movs	r3, #3
 15c:	4013      	ands	r3, r2
 15e:	2b02      	cmp	r3, #2
 160:	d006      	beq.n	170 <Chip_Clock_GetMainClockRate+0x1c>
 162:	2b03      	cmp	r3, #3
 164:	d007      	beq.n	176 <Chip_Clock_GetMainClockRate+0x22>
 166:	2b01      	cmp	r3, #1
 168:	d108      	bne.n	17c <Chip_Clock_GetMainClockRate+0x28>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_MAINCLKSRC_PLLIN:
		clkRate = Chip_Clock_GetSystemPLLInClockRate();
 16a:	f7ff ffd3 	bl	114 <Chip_Clock_GetSystemPLLInClockRate>
		break;
 16e:	e006      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
		clkRate = Chip_Clock_GetLFOOSCRate();
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
 170:	f7ff ffbc 	bl	ec <Chip_Clock_GetWDTOSCRate>
		break;
 174:	e003      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
#endif

	case SYSCTL_MAINCLKSRC_PLLOUT:
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
 176:	f7ff ffe1 	bl	13c <Chip_Clock_GetSystemPLLOutClockRate>
		break;
 17a:	e000      	b.n	17e <Chip_Clock_GetMainClockRate+0x2a>
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 17c:	4801      	ldr	r0, [pc, #4]	; (184 <Chip_Clock_GetMainClockRate+0x30>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 17e:	bd08      	pop	{r3, pc}
 180:	40048000 	.word	0x40048000
 184:	00b71b00 	.word	0x00b71b00

00000188 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 188:	b508      	push	{r3, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 18a:	f7ff ffe3 	bl	154 <Chip_Clock_GetMainClockRate>
 18e:	4b02      	ldr	r3, [pc, #8]	; (198 <Chip_Clock_GetSystemClockRate+0x10>)
 190:	6f99      	ldr	r1, [r3, #120]	; 0x78
 192:	f000 fb13 	bl	7bc <__aeabi_uidiv>
}
 196:	bd08      	pop	{r3, pc}
 198:	40048000 	.word	0x40048000

0000019c <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 19c:	2140      	movs	r1, #64	; 0x40
 19e:	4a02      	ldr	r2, [pc, #8]	; (1a8 <Chip_GPIO_Init+0xc>)
 1a0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 1a2:	430b      	orrs	r3, r1
 1a4:	67d3      	str	r3, [r2, #124]	; 0x7c
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
 1a6:	4770      	bx	lr
 1a8:	40048004 	.word	0x40048004

000001ac <Chip_GPIO_WriteDirBit>:
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_GPIO);
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
 1ac:	b510      	push	{r4, lr}
 1ae:	2480      	movs	r4, #128	; 0x80
 1b0:	0409      	lsls	r1, r1, #16
 1b2:	0224      	lsls	r4, r4, #8
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 1b4:	1841      	adds	r1, r0, r1
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
 1b6:	2b00      	cmp	r3, #0
 1b8:	d006      	beq.n	1c8 <Chip_GPIO_WriteDirBit+0x1c>
		pGPIO[port].DIR |= 1UL << bit;
 1ba:	2001      	movs	r0, #1
 1bc:	4090      	lsls	r0, r2
 1be:	1c02      	adds	r2, r0, #0
 1c0:	590b      	ldr	r3, [r1, r4]
 1c2:	431a      	orrs	r2, r3
 1c4:	510a      	str	r2, [r1, r4]
 1c6:	e004      	b.n	1d2 <Chip_GPIO_WriteDirBit+0x26>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 1c8:	2001      	movs	r0, #1
 1ca:	4090      	lsls	r0, r2
 1cc:	590b      	ldr	r3, [r1, r4]
 1ce:	4383      	bics	r3, r0
 1d0:	510b      	str	r3, [r1, r4]
	}
}
 1d2:	bd10      	pop	{r4, pc}

000001d4 <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
 1d4:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
 1d6:	2300      	movs	r3, #0
 ****************************************************************************/

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
 1d8:	6001      	str	r1, [r0, #0]
	RingBuff->count = count;
	RingBuff->itemSz = itemSize;
 1da:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
 1dc:	6103      	str	r3, [r0, #16]
 1de:	60c3      	str	r3, [r0, #12]

	return 1;
}
 1e0:	2001      	movs	r0, #1
 1e2:	4770      	bx	lr

000001e4 <RingBuffer_Insert>:

/* Insert a single item into Ring Buffer */
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
 1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 1e6:	1c04      	adds	r4, r0, #0
 1e8:	1c0d      	adds	r5, r1, #0
	uint8_t *ptr = RingBuff->data;
 1ea:	6807      	ldr	r7, [r0, #0]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1ec:	6923      	ldr	r3, [r4, #16]
 1ee:	68c0      	ldr	r0, [r0, #12]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	1 if the ring buffer is full, otherwise 0
 */
STATIC INLINE int RingBuffer_IsFull(RINGBUFF_T *RingBuff)
{
	return (RingBuffer_GetCount(RingBuff) >= RingBuff->count);
 1f0:	6861      	ldr	r1, [r4, #4]
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Number of items in the ring buffer
 */
STATIC INLINE uint32_t RingBuffer_GetCount(RINGBUFF_T *RingBuff)
{
	return RB_VHEAD(RingBuff) - RB_VTAIL(RingBuff);
 1f2:	1ac3      	subs	r3, r0, r3

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;
 1f4:	2200      	movs	r2, #0
int RingBuffer_Insert(RINGBUFF_T *RingBuff, const void *data)
{
	uint8_t *ptr = RingBuff->data;

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
 1f6:	428b      	cmp	r3, r1
 1f8:	d20c      	bcs.n	214 <Stack_Size+0x14>
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 1fa:	f000 fb65 	bl	8c8 <__aeabi_uidivmod>
 1fe:	68a6      	ldr	r6, [r4, #8]
 200:	4371      	muls	r1, r6
	memcpy(ptr, data, RingBuff->itemSz);
 202:	1c32      	adds	r2, r6, #0

	/* We cannot insert when queue is full */
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
 204:	1878      	adds	r0, r7, r1
	memcpy(ptr, data, RingBuff->itemSz);
 206:	1c29      	adds	r1, r5, #0
 208:	f000 fb86 	bl	918 <memcpy>
	RingBuff->head++;

	return 1;
 20c:	2201      	movs	r2, #1
	if (RingBuffer_IsFull(RingBuff))
		return 0;

	ptr += RB_INDH(RingBuff) * RingBuff->itemSz;
	memcpy(ptr, data, RingBuff->itemSz);
	RingBuff->head++;
 20e:	68e3      	ldr	r3, [r4, #12]
 210:	3301      	adds	r3, #1
 212:	60e3      	str	r3, [r4, #12]

	return 1;
}
 214:	1c10      	adds	r0, r2, #0
 216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000218 <Chip_TIMER_Init>:

/* Returns clock index for a specific timer referenced by IP block address */
STATIC CHIP_SYSCTL_CLOCK_T Chip_TIMER_GetClock(LPC_TIMER_T *pTMR)
{
  CHIP_SYSCTL_CLOCK_T tmrClk;
  if (pTMR == LPC_TIMER32_1) {
 218:	4a0a      	ldr	r2, [pc, #40]	; (244 <Chip_TIMER_Init+0x2c>)
	  tmrClk = SYSCTL_CLOCK_CT32B1;
 21a:	230a      	movs	r3, #10

/* Returns clock index for a specific timer referenced by IP block address */
STATIC CHIP_SYSCTL_CLOCK_T Chip_TIMER_GetClock(LPC_TIMER_T *pTMR)
{
  CHIP_SYSCTL_CLOCK_T tmrClk;
  if (pTMR == LPC_TIMER32_1) {
 21c:	4290      	cmp	r0, r2
 21e:	d009      	beq.n	234 <Chip_TIMER_Init+0x1c>
	  tmrClk = SYSCTL_CLOCK_CT32B1;
  }
  else if (pTMR == LPC_TIMER16_0) {
 220:	4a09      	ldr	r2, [pc, #36]	; (248 <Chip_TIMER_Init+0x30>)
	  tmrClk = SYSCTL_CLOCK_CT16B0;
 222:	3b03      	subs	r3, #3
{
  CHIP_SYSCTL_CLOCK_T tmrClk;
  if (pTMR == LPC_TIMER32_1) {
	  tmrClk = SYSCTL_CLOCK_CT32B1;
  }
  else if (pTMR == LPC_TIMER16_0) {
 224:	4290      	cmp	r0, r2
 226:	d005      	beq.n	234 <Chip_TIMER_Init+0x1c>
  }
  else if (pTMR == LPC_TIMER16_1) {
	  tmrClk = SYSCTL_CLOCK_CT16B1;
  }
  else {
	  tmrClk = SYSCTL_CLOCK_CT32B0;
 228:	4b08      	ldr	r3, [pc, #32]	; (24c <Chip_TIMER_Init+0x34>)
 22a:	18c0      	adds	r0, r0, r3
 22c:	4243      	negs	r3, r0
 22e:	4143      	adcs	r3, r0
 230:	2009      	movs	r0, #9
 232:	1ac3      	subs	r3, r0, r3
 234:	2001      	movs	r0, #1
 236:	4098      	lsls	r0, r3
 238:	1c03      	adds	r3, r0, #0
 23a:	4905      	ldr	r1, [pc, #20]	; (250 <Chip_TIMER_Init+0x38>)
 23c:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 23e:	4313      	orrs	r3, r2
 240:	67cb      	str	r3, [r1, #124]	; 0x7c

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
	Chip_Clock_EnablePeriphClock(Chip_TIMER_GetClock(pTMR));
}
 242:	4770      	bx	lr
 244:	40018000 	.word	0x40018000
 248:	4000c000 	.word	0x4000c000
 24c:	bfff0000 	.word	0xbfff0000
 250:	40048004 	.word	0x40048004

00000254 <Chip_TIMER_Reset>:
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
	pTMR->TCR = 0;
 254:	2200      	movs	r2, #0
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
 256:	6843      	ldr	r3, [r0, #4]
	pTMR->TCR = 0;
 258:	6042      	str	r2, [r0, #4]
	pTMR->TC = 1;
 25a:	3201      	adds	r2, #1
 25c:	6082      	str	r2, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
 25e:	3201      	adds	r2, #1
 260:	6042      	str	r2, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
 262:	6882      	ldr	r2, [r0, #8]
 264:	2a00      	cmp	r2, #0
 266:	d1fc      	bne.n	262 <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
 268:	6043      	str	r3, [r0, #4]
}
 26a:	4770      	bx	lr

0000026c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
 26c:	b510      	push	{r4, lr}
 26e:	2480      	movs	r4, #128	; 0x80
 270:	4b07      	ldr	r3, [pc, #28]	; (290 <Chip_UART_Init+0x24>)
 272:	0164      	lsls	r4, r4, #5
 274:	1d19      	adds	r1, r3, #4
 276:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 278:	3398      	adds	r3, #152	; 0x98
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 27a:	4322      	orrs	r2, r4
 27c:	67ca      	str	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
 27e:	2201      	movs	r2, #1
 280:	601a      	str	r2, [r3, #0]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 282:	2307      	movs	r3, #7
 284:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 286:	3b04      	subs	r3, #4
 288:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
 28a:	330d      	adds	r3, #13
 28c:	6283      	str	r3, [r0, #40]	; 0x28
}
 28e:	bd10      	pop	{r4, pc}
 290:	40048000 	.word	0x40048000

00000294 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int sent = 0;
 294:	2300      	movs	r3, #0
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_UART0);
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
 296:	b510      	push	{r4, lr}
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
 298:	4293      	cmp	r3, r2
 29a:	da06      	bge.n	2aa <Chip_UART_Send+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 29c:	6944      	ldr	r4, [r0, #20]
 29e:	06a4      	lsls	r4, r4, #26
 2a0:	d503      	bpl.n	2aa <Chip_UART_Send+0x16>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
 2a2:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
 2a4:	3301      	adds	r3, #1
 2a6:	6004      	str	r4, [r0, #0]
 2a8:	e7f6      	b.n	298 <Chip_UART_Send+0x4>
	}

	return sent;
}
 2aa:	1c18      	adds	r0, r3, #0
 2ac:	bd10      	pop	{r4, pc}

000002ae <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
 2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 2b0:	1c07      	adds	r7, r0, #0
 2b2:	1c0e      	adds	r6, r1, #0
 2b4:	1c14      	adds	r4, r2, #0
	int pass, sent = 0;
 2b6:	2500      	movs	r5, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
 2b8:	2c00      	cmp	r4, #0
 2ba:	dd08      	ble.n	2ce <Chip_UART_SendBlocking+0x20>
		pass = Chip_UART_Send(pUART, p8, numBytes);
 2bc:	1c31      	adds	r1, r6, #0
 2be:	1c22      	adds	r2, r4, #0
 2c0:	1c38      	adds	r0, r7, #0
 2c2:	f7ff ffe7 	bl	294 <Chip_UART_Send>
		numBytes -= pass;
 2c6:	1a24      	subs	r4, r4, r0
		sent += pass;
 2c8:	182d      	adds	r5, r5, r0
		p8 += pass;
 2ca:	1836      	adds	r6, r6, r0
 2cc:	e7f4      	b.n	2b8 <Chip_UART_SendBlocking+0xa>
	}

	return sent;
}
 2ce:	1c28      	adds	r0, r5, #0
 2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000002d2 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
 2d2:	b570      	push	{r4, r5, r6, lr}
 2d4:	1c0e      	adds	r6, r1, #0
 2d6:	1c04      	adds	r4, r0, #0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2d8:	f7ff ff3c 	bl	154 <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
 2dc:	0131      	lsls	r1, r6, #4
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 2de:	1c05      	adds	r5, r0, #0
	div = clkin / (baudrate * 16);
 2e0:	f000 fa6c 	bl	7bc <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2e4:	2280      	movs	r2, #128	; 0x80
 2e6:	1c01      	adds	r1, r0, #0
 2e8:	68e3      	ldr	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2ea:	1c0e      	adds	r6, r1, #0
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 2ec:	4313      	orrs	r3, r2
 2ee:	60e3      	str	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2f0:	23ff      	movs	r3, #255	; 0xff

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
 2f2:	0a00      	lsrs	r0, r0, #8
 2f4:	401e      	ands	r6, r3
	pUART->DLM = (uint32_t) dlm;
 2f6:	4003      	ands	r3, r0
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 2f8:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
 2fa:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
 2fc:	68e3      	ldr	r3, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
 2fe:	1c28      	adds	r0, r5, #0
 300:	4393      	bics	r3, r2
 302:	60e3      	str	r3, [r4, #12]
 304:	f000 fa5a 	bl	7bc <__aeabi_uidiv>
}
 308:	bd70      	pop	{r4, r5, r6, pc}
	...

0000030c <SysTick_Handler>:

/**
 * SysTick Timer Interrupt Handler. Counts milliseconds since start
 */
void SysTick_Handler(void) {
	msTicks++;
 30c:	4a02      	ldr	r2, [pc, #8]	; (318 <SysTick_Handler+0xc>)
 30e:	6813      	ldr	r3, [r2, #0]
 310:	3301      	adds	r3, #1
 312:	6013      	str	r3, [r2, #0]
}
 314:	4770      	bx	lr
 316:	46c0      	nop			; (mov r8, r8)
 318:	10000284 	.word	0x10000284

0000031c <CAN_IRQHandler>:

/**
 * CCAN Interrupt Handler. Calls the isr() API located in the CCAN ROM
 */
void CAN_IRQHandler(void) {
 31c:	b508      	push	{r3, lr}
	LPC_CCAN_API->isr();
 31e:	4b03      	ldr	r3, [pc, #12]	; (32c <CAN_IRQHandler+0x10>)
 320:	681b      	ldr	r3, [r3, #0]
 322:	689b      	ldr	r3, [r3, #8]
 324:	685b      	ldr	r3, [r3, #4]
 326:	4798      	blx	r3
}
 328:	bd08      	pop	{r3, pc}
 32a:	46c0      	nop			; (mov r8, r8)
 32c:	1fff1ff8 	.word	0x1fff1ff8

00000330 <Board_SysTick_Init>:
// -------------------------------------------------------------
// Public Functions and Members

const uint32_t OscRateIn = 0;

int8_t Board_SysTick_Init(void) {
 330:	b510      	push	{r4, lr}
	msTicks = 0;
 332:	2400      	movs	r4, #0
 334:	4b0c      	ldr	r3, [pc, #48]	; (368 <Board_SysTick_Init+0x38>)
 336:	601c      	str	r4, [r3, #0]

	// Update the value of SystemCoreClock to the clock speed in hz
	SystemCoreClockUpdate();
 338:	f7ff fed0 	bl	dc <SystemCoreClockUpdate>

	// Initialize SysTick Timer to fire interrupt at 1kHz
	return (SysTick_Config (SystemCoreClock / 1000));
 33c:	21fa      	movs	r1, #250	; 0xfa
 33e:	4b0b      	ldr	r3, [pc, #44]	; (36c <Board_SysTick_Init+0x3c>)
 340:	0089      	lsls	r1, r1, #2
 342:	6818      	ldr	r0, [r3, #0]
 344:	f000 fa3a 	bl	7bc <__aeabi_uidiv>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 348:	4a09      	ldr	r2, [pc, #36]	; (370 <Board_SysTick_Init+0x40>)
 34a:	3801      	subs	r0, #1
 34c:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 34e:	20c0      	movs	r0, #192	; 0xc0
 350:	4908      	ldr	r1, [pc, #32]	; (374 <Board_SysTick_Init+0x44>)
 352:	0600      	lsls	r0, r0, #24
 354:	6a0b      	ldr	r3, [r1, #32]
 356:	021b      	lsls	r3, r3, #8
 358:	0a1b      	lsrs	r3, r3, #8
 35a:	4303      	orrs	r3, r0
 35c:	620b      	str	r3, [r1, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 35e:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 360:	6094      	str	r4, [r2, #8]
}
 362:	1c20      	adds	r0, r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 364:	6013      	str	r3, [r2, #0]
 366:	bd10      	pop	{r4, pc}
 368:	10000284 	.word	0x10000284
 36c:	10000100 	.word	0x10000100
 370:	e000e010 	.word	0xe000e010
 374:	e000ed00 	.word	0xe000ed00

00000378 <Board_LEDs_Init>:

void Board_LEDs_Init(void) {
 378:	b510      	push	{r4, lr}
	Chip_GPIO_Init(LPC_GPIO);
 37a:	24a0      	movs	r4, #160	; 0xa0
 37c:	05e4      	lsls	r4, r4, #23
 37e:	1c20      	adds	r0, r4, #0
 380:	f7ff ff0c 	bl	19c <Chip_GPIO_Init>
	Chip_GPIO_WriteDirBit(LPC_GPIO, LED0, true);
 384:	1c20      	adds	r0, r4, #0
 386:	2102      	movs	r1, #2
 388:	220a      	movs	r2, #10
 38a:	2301      	movs	r3, #1
 38c:	f7ff ff0e 	bl	1ac <Chip_GPIO_WriteDirBit>
}
 390:	bd10      	pop	{r4, pc}
	...

00000394 <Board_UART_Init>:

void Board_UART_Init(uint32_t baudrate) {
 394:	b538      	push	{r3, r4, r5, lr}
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 396:	4b0b      	ldr	r3, [pc, #44]	; (3c4 <Board_UART_Init+0x30>)
 398:	2201      	movs	r2, #1
 39a:	1c19      	adds	r1, r3, #0
 39c:	1c05      	adds	r5, r0, #0
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_RX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Rx pin
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_TX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Tx Pin

	Chip_UART_Init(LPC_USART);
 39e:	4c0a      	ldr	r4, [pc, #40]	; (3c8 <Board_UART_Init+0x34>)
 3a0:	33a8      	adds	r3, #168	; 0xa8
 3a2:	31a4      	adds	r1, #164	; 0xa4
 3a4:	600a      	str	r2, [r1, #0]
 3a6:	1c20      	adds	r0, r4, #0
 3a8:	601a      	str	r2, [r3, #0]
 3aa:	f7ff ff5f 	bl	26c <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, baudrate);
 3ae:	1c29      	adds	r1, r5, #0
 3b0:	1c20      	adds	r0, r4, #0
 3b2:	f7ff ff8e 	bl	2d2 <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 3b6:	2303      	movs	r3, #3
 3b8:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 3ba:	337e      	adds	r3, #126	; 0x7e
 3bc:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
 3be:	3b01      	subs	r3, #1
 3c0:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);
}
 3c2:	bd38      	pop	{r3, r4, r5, pc}
 3c4:	40044000 	.word	0x40044000
 3c8:	40008000 	.word	0x40008000

000003cc <Board_UART_Print>:

void Board_UART_Print(const char *str) {
 3cc:	b510      	push	{r4, lr}
 3ce:	1c04      	adds	r4, r0, #0
	Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
 3d0:	f000 fae0 	bl	994 <strlen>
 3d4:	1c21      	adds	r1, r4, #0
 3d6:	1c02      	adds	r2, r0, #0
 3d8:	4801      	ldr	r0, [pc, #4]	; (3e0 <Board_UART_Print+0x14>)
 3da:	f7ff ff68 	bl	2ae <Chip_UART_SendBlocking>
}
 3de:	bd10      	pop	{r4, pc}
 3e0:	40008000 	.word	0x40008000

000003e4 <Board_UART_Println>:

void Board_UART_Println(const char *str) {
 3e4:	b508      	push	{r3, lr}
	Board_UART_Print(str);
 3e6:	f7ff fff1 	bl	3cc <Board_UART_Print>
	Board_UART_Print("\r\n");
 3ea:	4802      	ldr	r0, [pc, #8]	; (3f4 <Board_UART_Println+0x10>)
 3ec:	f7ff ffee 	bl	3cc <Board_UART_Print>
}
 3f0:	bd08      	pop	{r3, pc}
 3f2:	46c0      	nop			; (mov r8, r8)
 3f4:	00000acc 	.word	0x00000acc

000003f8 <CAN_baudrate_calculate>:
int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
	return Chip_UART_Read(LPC_USART, data, num_bytes);
}

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 3fa:	1c0c      	adds	r4, r1, #0
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 3fc:	2180      	movs	r1, #128	; 0x80
 3fe:	1c05      	adds	r5, r0, #0
 400:	4a1b      	ldr	r2, [pc, #108]	; (470 <CAN_baudrate_calculate+0x78>)
 402:	0289      	lsls	r1, r1, #10
 404:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 406:	430b      	orrs	r3, r1
 408:	67d3      	str	r3, [r2, #124]	; 0x7c
	uint32_t pClk, div, quanta, segs, seg1, seg2, clk_per_bit, can_sjw;
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();
 40a:	f7ff fea3 	bl	154 <Chip_Clock_GetMainClockRate>

	clk_per_bit = pClk / baud_rate;
 40e:	1c29      	adds	r1, r5, #0
 410:	f000 f9d4 	bl	7bc <__aeabi_uidiv>
 414:	2101      	movs	r1, #1
 416:	4684      	mov	ip, r0
 418:	2503      	movs	r5, #3
 41a:	434d      	muls	r5, r1
int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
	return Chip_UART_Read(LPC_USART, data, num_bytes);
}

void CAN_baudrate_calculate(uint32_t baud_rate, uint32_t *can_api_timing_cfg)
{
 41c:	1c0e      	adds	r6, r1, #0
 41e:	1c2f      	adds	r7, r5, #0
 420:	2201      	movs	r2, #1
 422:	1e4b      	subs	r3, r1, #1
 424:	9301      	str	r3, [sp, #4]
 426:	1c38      	adds	r0, r7, #0
 428:	2303      	movs	r3, #3
	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
 42a:	4584      	cmp	ip, r0
 42c:	d113      	bne.n	456 <CAN_baudrate_calculate+0x5e>
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 42e:	9901      	ldr	r1, [sp, #4]

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
 430:	3b03      	subs	r3, #3
					seg1 = segs / 2;
 432:	0858      	lsrs	r0, r3, #1
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
 434:	6021      	str	r1, [r4, #0]
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 436:	3a01      	subs	r2, #1
 438:	0201      	lsls	r1, r0, #8
 43a:	430a      	orrs	r2, r1
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
 43c:	1e01      	subs	r1, r0, #0
 43e:	2903      	cmp	r1, #3
 440:	d900      	bls.n	444 <CAN_baudrate_calculate+0x4c>
 442:	2103      	movs	r1, #3
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 444:	0189      	lsls	r1, r1, #6
 446:	430a      	orrs	r2, r1
 448:	2107      	movs	r1, #7
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
				if (clk_per_bit == (segs * quanta * (div + 1))) {
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
 44a:	1a1b      	subs	r3, r3, r0
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 44c:	400b      	ands	r3, r1
 44e:	031b      	lsls	r3, r3, #12
 450:	431a      	orrs	r2, r3
					segs -= 3;
					seg1 = segs / 2;
					seg2 = segs - seg1;
					can_sjw = seg1 > 3 ? 3 : seg1;
					can_api_timing_cfg[0] = div;
					can_api_timing_cfg[1] =
 452:	6062      	str	r2, [r4, #4]
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
					return;
 454:	e00b      	b.n	46e <CAN_baudrate_calculate+0x76>

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
			for (segs = 3; segs <= 17; segs++) {
 456:	3301      	adds	r3, #1
 458:	1980      	adds	r0, r0, r6
 45a:	2b12      	cmp	r3, #18
 45c:	d1e5      	bne.n	42a <CAN_baudrate_calculate+0x32>
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
		for (quanta = 1; quanta <= 32; quanta++) {
 45e:	3201      	adds	r2, #1
 460:	1876      	adds	r6, r6, r1
 462:	197f      	adds	r7, r7, r5
 464:	2a21      	cmp	r2, #33	; 0x21
 466:	d1de      	bne.n	426 <CAN_baudrate_calculate+0x2e>
 468:	3101      	adds	r1, #1
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_CAN);
	pClk = Chip_Clock_GetMainClockRate();

	clk_per_bit = pClk / baud_rate;

	for (div = 0; div <= 15; div++) {
 46a:	2911      	cmp	r1, #17
 46c:	d1d4      	bne.n	418 <CAN_baudrate_calculate+0x20>
					return;
				}
			}
		}
	}
}
 46e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 470:	40048004 	.word	0x40048004

00000474 <Board_CAN_Init>:

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {
 474:	b510      	push	{r4, lr}
 476:	b08a      	sub	sp, #40	; 0x28

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 478:	9304      	str	r3, [sp, #16]
 47a:	2300      	movs	r3, #0
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 47c:	4c0d      	ldr	r4, [pc, #52]	; (4b4 <Board_CAN_Init+0x40>)

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 47e:	9102      	str	r1, [sp, #8]
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 480:	4669      	mov	r1, sp

void Board_CAN_Init(uint32_t baudrate, void (*rx_callback)(uint8_t), void (*tx_callback)(uint8_t), void (*error_callback)(uint32_t)) {

	uint32_t can_api_timing_cfg[2];
	
	CCAN_CALLBACKS_T callbacks = {
 482:	9203      	str	r2, [sp, #12]
 484:	9305      	str	r3, [sp, #20]
 486:	9306      	str	r3, [sp, #24]
 488:	9307      	str	r3, [sp, #28]
 48a:	9308      	str	r3, [sp, #32]
 48c:	9309      	str	r3, [sp, #36]	; 0x24
		NULL,
		NULL,
		NULL,
	};

	CAN_baudrate_calculate(baudrate, can_api_timing_cfg);
 48e:	f7ff ffb3 	bl	3f8 <CAN_baudrate_calculate>

	/* Initialize the CAN controller */
	LPC_CCAN_API->init_can(&can_api_timing_cfg[0], TRUE);
 492:	6823      	ldr	r3, [r4, #0]
 494:	4668      	mov	r0, sp
 496:	689b      	ldr	r3, [r3, #8]
 498:	2101      	movs	r1, #1
 49a:	681b      	ldr	r3, [r3, #0]
 49c:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
 49e:	6823      	ldr	r3, [r4, #0]
 4a0:	a802      	add	r0, sp, #8
 4a2:	689b      	ldr	r3, [r3, #8]
 4a4:	69db      	ldr	r3, [r3, #28]
 4a6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 4a8:	2280      	movs	r2, #128	; 0x80
 4aa:	4b03      	ldr	r3, [pc, #12]	; (4b8 <Board_CAN_Init+0x44>)
 4ac:	0192      	lsls	r2, r2, #6
 4ae:	601a      	str	r2, [r3, #0]

	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);
}
 4b0:	b00a      	add	sp, #40	; 0x28
 4b2:	bd10      	pop	{r4, pc}
 4b4:	1fff1ff8 	.word	0x1fff1ff8
 4b8:	e000e100 	.word	0xe000e100

000004bc <Board_Setup_Timers>:

void Board_Setup_Timers(void){
 4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @return	Nothing
 * @note	Sets the prescale count value.
 */
STATIC INLINE void Chip_TIMER_PrescaleSet(LPC_TIMER_T *pTMR, uint32_t prescale)
{
	pTMR->PR = prescale;
 4be:	2700      	movs	r7, #0
    //---------------
    // Initialize the timer
        Chip_TIMER_Init(LPC_TIMER32_0);
        Chip_TIMER_Reset(LPC_TIMER32_0);
        Chip_TIMER_PrescaleSet(LPC_TIMER32_0, 0);
        LPC_TIMER32_0->CCR |= 5; // Set the first and third bits of the capture value in the Capture Control Register (see user manual)
 4c0:	2605      	movs	r6, #5
}

void Board_Setup_Timers(void){
    //---------------
    // Initialize the timer
        Chip_TIMER_Init(LPC_TIMER32_0);
 4c2:	4c19      	ldr	r4, [pc, #100]	; (528 <Board_Setup_Timers+0x6c>)
        Chip_TIMER_Reset(LPC_TIMER32_0);
        Chip_TIMER_PrescaleSet(LPC_TIMER32_0, 0);
        LPC_TIMER32_0->CCR |= 5; // Set the first and third bits of the capture value in the Capture Control Register (see user manual)

        Chip_TIMER_Init(LPC_TIMER32_1);
 4c4:	4d19      	ldr	r5, [pc, #100]	; (52c <Board_Setup_Timers+0x70>)
}

void Board_Setup_Timers(void){
    //---------------
    // Initialize the timer
        Chip_TIMER_Init(LPC_TIMER32_0);
 4c6:	1c20      	adds	r0, r4, #0
 4c8:	f7ff fea6 	bl	218 <Chip_TIMER_Init>
        Chip_TIMER_Reset(LPC_TIMER32_0);
 4cc:	1c20      	adds	r0, r4, #0
 4ce:	f7ff fec1 	bl	254 <Chip_TIMER_Reset>
 4d2:	60e7      	str	r7, [r4, #12]
        Chip_TIMER_PrescaleSet(LPC_TIMER32_0, 0);
        LPC_TIMER32_0->CCR |= 5; // Set the first and third bits of the capture value in the Capture Control Register (see user manual)
 4d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28

        Chip_TIMER_Init(LPC_TIMER32_1);
 4d6:	1c28      	adds	r0, r5, #0
    //---------------
    // Initialize the timer
        Chip_TIMER_Init(LPC_TIMER32_0);
        Chip_TIMER_Reset(LPC_TIMER32_0);
        Chip_TIMER_PrescaleSet(LPC_TIMER32_0, 0);
        LPC_TIMER32_0->CCR |= 5; // Set the first and third bits of the capture value in the Capture Control Register (see user manual)
 4d8:	4333      	orrs	r3, r6
 4da:	62a3      	str	r3, [r4, #40]	; 0x28

        Chip_TIMER_Init(LPC_TIMER32_1);
 4dc:	f7ff fe9c 	bl	218 <Chip_TIMER_Init>
        Chip_TIMER_Reset(LPC_TIMER32_1);
 4e0:	1c28      	adds	r0, r5, #0
 4e2:	f7ff feb7 	bl	254 <Chip_TIMER_Reset>
 4e6:	2202      	movs	r2, #2
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 4e8:	2180      	movs	r1, #128	; 0x80
 4ea:	60ef      	str	r7, [r5, #12]
        Chip_TIMER_PrescaleSet(LPC_TIMER32_1, 0);
        LPC_TIMER32_1->CCR |= 5; // Set the first and third bits of the capture value in the Capture Control Register (see user manual)
 4ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 4ee:	05c9      	lsls	r1, r1, #23
 4f0:	4333      	orrs	r3, r6
 4f2:	62ab      	str	r3, [r5, #40]	; 0x28
 4f4:	4b0e      	ldr	r3, [pc, #56]	; (530 <Board_Setup_Timers+0x74>)
 4f6:	601a      	str	r2, [r3, #0]
 4f8:	4a0e      	ldr	r2, [pc, #56]	; (534 <Board_Setup_Timers+0x78>)
 4fa:	6a13      	ldr	r3, [r2, #32]
 4fc:	021b      	lsls	r3, r3, #8
 4fe:	0a1b      	lsrs	r3, r3, #8
 500:	430b      	orrs	r3, r1
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 502:	21c4      	movs	r1, #196	; 0xc4
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 504:	6213      	str	r3, [r2, #32]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 506:	4b0c      	ldr	r3, [pc, #48]	; (538 <Board_Setup_Timers+0x7c>)
 508:	0089      	lsls	r1, r1, #2
 50a:	5858      	ldr	r0, [r3, r1]
 50c:	4a0b      	ldr	r2, [pc, #44]	; (53c <Board_Setup_Timers+0x80>)
 50e:	4002      	ands	r2, r0
 510:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 512:	2280      	movs	r2, #128	; 0x80
 514:	3991      	subs	r1, #145	; 0x91
 516:	02d2      	lsls	r2, r2, #11
 518:	39ff      	subs	r1, #255	; 0xff
 51a:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 51c:	601a      	str	r2, [r3, #0]
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
	pTMR->TCR |= TIMER_ENABLE;
 51e:	2201      	movs	r2, #1
 520:	6863      	ldr	r3, [r4, #4]
 522:	4313      	orrs	r3, r2
 524:	6063      	str	r3, [r4, #4]
        NVIC_SetPriority(SysTick_IRQn, 1);      // Give the SysTick function a lower priority
        NVIC_SetPriority(TIMER_32_0_IRQn, 0);   // Ensure that the 32 bit timer capture interrupt has the highest priority
        NVIC_ClearPendingIRQ(TIMER_32_0_IRQn);  // Ensure that there are no pending interrupts on TIMER_32_0_IRQn
        NVIC_EnableIRQ(TIMER_32_0_IRQn);        // Enable interrupts on TIMER_32_0_IRQn
        Chip_TIMER_Enable(LPC_TIMER32_0);                                               // Start the timer
}
 526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 528:	40014000 	.word	0x40014000
 52c:	40018000 	.word	0x40018000
 530:	400440a0 	.word	0x400440a0
 534:	e000ed00 	.word	0xe000ed00
 538:	e000e100 	.word	0xe000e100
 53c:	ff00ffff 	.word	0xff00ffff

00000540 <Board_Timer0_Reset_Clear>:

void Board_Timer0_Reset_Clear(void){
 540:	b510      	push	{r4, lr}
	Chip_TIMER_Reset(LPC_TIMER32_0);            // Reset the timer immediately 
 542:	4c03      	ldr	r4, [pc, #12]	; (550 <Board_Timer0_Reset_Clear+0x10>)
 544:	1c20      	adds	r0, r4, #0
 546:	f7ff fe85 	bl	254 <Chip_TIMER_Reset>
 * @return	Nothing
 * @note	Clears a pending timer capture interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearCapture(LPC_TIMER_T *pTMR, int8_t capnum)
{
	pTMR->IR = (0x10 << capnum);
 54a:	2310      	movs	r3, #16
 54c:	6023      	str	r3, [r4, #0]
	Chip_TIMER_ClearCapture(LPC_TIMER32_0, 0);              // Clear the capture

}
 54e:	bd10      	pop	{r4, pc}
 550:	40014000 	.word	0x40014000

00000554 <Board_Timer0_ReadCapture>:
 * @return	The selected capture register value
 * @note	Returns the selected capture register value.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCapture(LPC_TIMER_T *pTMR, int8_t capnum)
{
	return pTMR->CR[capnum];
 554:	4b01      	ldr	r3, [pc, #4]	; (55c <Board_Timer0_ReadCapture+0x8>)
 556:	6ad8      	ldr	r0, [r3, #44]	; 0x2c

uint32_t Board_Timer0_ReadCapture(void){
	return Chip_TIMER_ReadCapture(LPC_TIMER32_0,0);	
}
 558:	4770      	bx	lr
 55a:	46c0      	nop			; (mov r8, r8)
 55c:	40014000 	.word	0x40014000

00000560 <CAN_tx>:
/*	CAN transmit callback */
/*	Function is executed by the Callback handler after
    a CAN message has been transmitted */
void CAN_tx(uint8_t msg_obj_num) {
	msg_obj_num = msg_obj_num;
}
 560:	4770      	bx	lr
	...

00000564 <CAN_error>:
/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
 564:	2201      	movs	r2, #1

/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
 566:	4b02      	ldr	r3, [pc, #8]	; (570 <CAN_error+0xc>)
 568:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
 56a:	4b02      	ldr	r3, [pc, #8]	; (574 <CAN_error+0x10>)
 56c:	701a      	strb	r2, [r3, #0]
}
 56e:	4770      	bx	lr
 570:	1000018c 	.word	0x1000018c
 574:	10000192 	.word	0x10000192

00000578 <CAN_rx>:
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 578:	b538      	push	{r3, r4, r5, lr}
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 57a:	4c08      	ldr	r4, [pc, #32]	; (59c <CAN_rx+0x24>)
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 57c:	4b08      	ldr	r3, [pc, #32]	; (5a0 <CAN_rx+0x28>)
/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
 57e:	7460      	strb	r0, [r4, #17]
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 580:	681b      	ldr	r3, [r3, #0]
// CAN Driver Callback Functions

/*	CAN receive callback */
/*	Function is executed by the Callback handler after
    a CAN message has been received */
void CAN_rx(uint8_t msg_obj_num) {
 582:	1c05      	adds	r5, r0, #0
	/* Determine which CAN message has been received */
	msg_obj.msgobj = msg_obj_num;
	/* Now load up the msg_obj structure with the CAN message */
	LPC_CCAN_API->can_receive(&msg_obj);
 584:	689b      	ldr	r3, [r3, #8]
 586:	1c20      	adds	r0, r4, #0
 588:	68db      	ldr	r3, [r3, #12]
 58a:	4798      	blx	r3
	if (msg_obj_num == 1) {
 58c:	2d01      	cmp	r5, #1
 58e:	d103      	bne.n	598 <CAN_rx+0x20>
		RingBuffer_Insert(&can_rx_buffer, &msg_obj);
 590:	4804      	ldr	r0, [pc, #16]	; (5a4 <CAN_rx+0x2c>)
 592:	1c21      	adds	r1, r4, #0
 594:	f7ff fe26 	bl	1e4 <RingBuffer_Insert>
	}
}
 598:	bd38      	pop	{r3, r4, r5, pc}
 59a:	46c0      	nop			; (mov r8, r8)
 59c:	100001a8 	.word	0x100001a8
 5a0:	1fff1ff8 	.word	0x1fff1ff8
 5a4:	10000194 	.word	0x10000194

000005a8 <TIMER32_0_IRQHandler>:
}

// -------------------------------------------------------------
// Interrupt Service Routines

void TIMER32_0_IRQHandler(void){
 5a8:	b570      	push	{r4, r5, r6, lr}
	Board_Timer0_Reset_Clear();
 5aa:	f7ff ffc9 	bl	540 <Board_Timer0_Reset_Clear>
	rpm_ticks = (rpm_ticks*rpm_count+Board_Timer0_ReadCapture())/(1+rpm_count);	// Continue the running average 
 5ae:	4d08      	ldr	r5, [pc, #32]	; (5d0 <TIMER32_0_IRQHandler+0x28>)
 5b0:	4e08      	ldr	r6, [pc, #32]	; (5d4 <TIMER32_0_IRQHandler+0x2c>)
 5b2:	6834      	ldr	r4, [r6, #0]
 5b4:	682b      	ldr	r3, [r5, #0]
 5b6:	435c      	muls	r4, r3
 5b8:	f7ff ffcc 	bl	554 <Board_Timer0_ReadCapture>
 5bc:	6829      	ldr	r1, [r5, #0]
 5be:	1900      	adds	r0, r0, r4
 5c0:	3101      	adds	r1, #1
 5c2:	f000 f8fb 	bl	7bc <__aeabi_uidiv>
 5c6:	6030      	str	r0, [r6, #0]
	rpm_count++;    								// Increase the count to allow the running average to be properly computed
 5c8:	682b      	ldr	r3, [r5, #0]
 5ca:	3301      	adds	r3, #1
 5cc:	602b      	str	r3, [r5, #0]
}
 5ce:	bd70      	pop	{r4, r5, r6, pc}
 5d0:	10000280 	.word	0x10000280
 5d4:	10000188 	.word	0x10000188

000005d8 <main>:
// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
 5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	//---------------
	// Initialize SysTick Timer to generate millisecond count
	if (Board_SysTick_Init()) {
 5da:	f7ff fea9 	bl	330 <Board_SysTick_Init>
 5de:	1e05      	subs	r5, r0, #0
 5e0:	d000      	beq.n	5e4 <main+0xc>
		// Unrecoverable Error. Hang.
		while(1);
 5e2:	e7fe      	b.n	5e2 <main+0xa>
	}

	//---------------
	// Initialize GPIO and LED as output
	Board_LEDs_Init();
 5e4:	f7ff fec8 	bl	378 <Board_LEDs_Init>
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 5e8:	2180      	movs	r1, #128	; 0x80
 5ea:	2380      	movs	r3, #128	; 0x80
	Board_LED_On(LED0);

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
 5ec:	2096      	movs	r0, #150	; 0x96
 5ee:	4a39      	ldr	r2, [pc, #228]	; (6d4 <main+0xfc>)
 5f0:	00c9      	lsls	r1, r1, #3
 5f2:	015b      	lsls	r3, r3, #5
 5f4:	50d1      	str	r1, [r2, r3]
 5f6:	0180      	lsls	r0, r0, #6
 5f8:	f7ff fecc 	bl	394 <Board_UART_Init>
	Board_UART_Println("Started up");
 5fc:	4836      	ldr	r0, [pc, #216]	; (6d8 <main+0x100>)
 5fe:	f7ff fef1 	bl	3e4 <Board_UART_Println>

	//---------------
	// Initialize CAN  and CAN Ring Buffer

	RingBuffer_Init(&can_rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), BUFFER_SIZE);
 602:	4c36      	ldr	r4, [pc, #216]	; (6dc <main+0x104>)
 604:	4936      	ldr	r1, [pc, #216]	; (6e0 <main+0x108>)
 606:	1c20      	adds	r0, r4, #0
 608:	2218      	movs	r2, #24
 60a:	2308      	movs	r3, #8
 60c:	f7ff fde2 	bl	1d4 <RingBuffer_Init>
	RingBuffer_Flush(&can_rx_buffer);
	Board_CAN_Init(CCAN_BAUD_RATE, CAN_rx, CAN_tx, CAN_error);
 610:	4a34      	ldr	r2, [pc, #208]	; (6e4 <main+0x10c>)
 612:	4835      	ldr	r0, [pc, #212]	; (6e8 <main+0x110>)
 614:	4935      	ldr	r1, [pc, #212]	; (6ec <main+0x114>)
 616:	4b36      	ldr	r3, [pc, #216]	; (6f0 <main+0x118>)
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
 618:	6125      	str	r5, [r4, #16]
 61a:	60e5      	str	r5, [r4, #12]
 61c:	f7ff ff2a 	bl	474 <Board_CAN_Init>

	rpm_count = 0;
 620:	4f34      	ldr	r7, [pc, #208]	; (6f4 <main+0x11c>)
	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x703;
	msg_obj.mask = 0x7FF;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 622:	4e35      	ldr	r6, [pc, #212]	; (6f8 <main+0x120>)

	RingBuffer_Init(&can_rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), BUFFER_SIZE);
	RingBuffer_Flush(&can_rx_buffer);
	Board_CAN_Init(CCAN_BAUD_RATE, CAN_rx, CAN_tx, CAN_error);

	rpm_count = 0;
 624:	603d      	str	r5, [r7, #0]

	Board_Setup_Timers();
 626:	f7ff ff49 	bl	4bc <Board_Setup_Timers>

		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
 62a:	2301      	movs	r3, #1
 62c:	4c33      	ldr	r4, [pc, #204]	; (6fc <main+0x124>)
 62e:	7463      	strb	r3, [r4, #17]
	msg_obj.mode_id = 0x703;
 630:	4b33      	ldr	r3, [pc, #204]	; (700 <main+0x128>)
	msg_obj.mask = 0x7FF;
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 632:	1c20      	adds	r0, r4, #0
		mode_id == 0xa0c for msgobj to accept message

	*/

	msg_obj.msgobj = 1;
	msg_obj.mode_id = 0x703;
 634:	6023      	str	r3, [r4, #0]
	msg_obj.mask = 0x7FF;
 636:	4b33      	ldr	r3, [pc, #204]	; (704 <main+0x12c>)
 638:	6063      	str	r3, [r4, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 63a:	6833      	ldr	r3, [r6, #0]
 63c:	689b      	ldr	r3, [r3, #8]
 63e:	689b      	ldr	r3, [r3, #8]
 640:	4798      	blx	r3
		Now its time to send
		LPC_CCAN_API->can_transmit(&msg_obj);

	*/

	can_error_flag = false;
 642:	4b31      	ldr	r3, [pc, #196]	; (708 <main+0x130>)
 644:	9700      	str	r7, [sp, #0]
 646:	701d      	strb	r5, [r3, #0]
	can_error_info = 0;
 648:	4b30      	ldr	r3, [pc, #192]	; (70c <main+0x134>)
 64a:	601d      	str	r5, [r3, #0]

	lastPrint = msTicks;
 64c:	4b30      	ldr	r3, [pc, #192]	; (710 <main+0x138>)
 64e:	681a      	ldr	r2, [r3, #0]
 650:	4b30      	ldr	r3, [pc, #192]	; (714 <main+0x13c>)
 652:	601a      	str	r2, [r3, #0]
 654:	4b2a      	ldr	r3, [pc, #168]	; (700 <main+0x128>)
 656:	9301      	str	r3, [sp, #4]

	while (1) {
        
		if (can_error_flag) {
 658:	4b2b      	ldr	r3, [pc, #172]	; (708 <main+0x130>)
 65a:	781a      	ldrb	r2, [r3, #0]
 65c:	2a00      	cmp	r2, #0
 65e:	d00e      	beq.n	67e <main+0xa6>
			can_error_flag = false;
 660:	2200      	movs	r2, #0
			Board_UART_Print("CAN Error: 0b");
 662:	482d      	ldr	r0, [pc, #180]	; (718 <main+0x140>)
	lastPrint = msTicks;

	while (1) {
        
		if (can_error_flag) {
			can_error_flag = false;
 664:	701a      	strb	r2, [r3, #0]
			Board_UART_Print("CAN Error: 0b");
 666:	f7ff feb1 	bl	3cc <Board_UART_Print>
			itoa(can_error_info, str, 2);
 66a:	4d2c      	ldr	r5, [pc, #176]	; (71c <main+0x144>)
 66c:	4b27      	ldr	r3, [pc, #156]	; (70c <main+0x134>)
 66e:	1c29      	adds	r1, r5, #0
 670:	6818      	ldr	r0, [r3, #0]
 672:	2202      	movs	r2, #2
 674:	f000 f94c 	bl	910 <itoa>
			Board_UART_Println(str);
 678:	1c28      	adds	r0, r5, #0
 67a:	f7ff feb3 	bl	3e4 <Board_UART_Println>
		}

		if(lastPrint+200<msTicks){							// 5 times per second
 67e:	4d25      	ldr	r5, [pc, #148]	; (714 <main+0x13c>)
 680:	4f23      	ldr	r7, [pc, #140]	; (710 <main+0x138>)
 682:	682b      	ldr	r3, [r5, #0]
 684:	683a      	ldr	r2, [r7, #0]
 686:	33c8      	adds	r3, #200	; 0xc8
 688:	4293      	cmp	r3, r2
 68a:	d2e5      	bcs.n	658 <main+0x80>
 //    			curr_rpm = 60 * SystemCoreClock/rpm_ticks/GMB_EDGES_PER_ROTATION;	// Convert from ticks to rpm
			curr_rpm = 100; 						// test
 68c:	2364      	movs	r3, #100	; 0x64
 68e:	4a24      	ldr	r2, [pc, #144]	; (720 <main+0x148>)
			itoa(curr_rpm, rpm_str, 10); 						// Convert to string
 690:	4924      	ldr	r1, [pc, #144]	; (724 <main+0x14c>)
			Board_UART_Println(str);
		}

		if(lastPrint+200<msTicks){							// 5 times per second
 //    			curr_rpm = 60 * SystemCoreClock/rpm_ticks/GMB_EDGES_PER_ROTATION;	// Convert from ticks to rpm
			curr_rpm = 100; 						// test
 692:	8013      	strh	r3, [r2, #0]
			itoa(curr_rpm, rpm_str, 10); 						// Convert to string
 694:	8810      	ldrh	r0, [r2, #0]
 696:	220a      	movs	r2, #10
 698:	b280      	uxth	r0, r0
 69a:	f000 f939 	bl	910 <itoa>
			rpm_ticks = 0;								// Set the average time back to 0
 69e:	2300      	movs	r3, #0
 6a0:	4a21      	ldr	r2, [pc, #132]	; (728 <main+0x150>)
			rpm_count = 0;								// Set the count for the average back to 0

			Board_UART_Print("Sending wheel velocity CAN message with ID: 0x703 Data: ");	// Print a UART Message with the current rpm
 6a2:	4822      	ldr	r0, [pc, #136]	; (72c <main+0x154>)

		if(lastPrint+200<msTicks){							// 5 times per second
 //    			curr_rpm = 60 * SystemCoreClock/rpm_ticks/GMB_EDGES_PER_ROTATION;	// Convert from ticks to rpm
			curr_rpm = 100; 						// test
			itoa(curr_rpm, rpm_str, 10); 						// Convert to string
			rpm_ticks = 0;								// Set the average time back to 0
 6a4:	6013      	str	r3, [r2, #0]
			rpm_count = 0;								// Set the count for the average back to 0
 6a6:	9a00      	ldr	r2, [sp, #0]
 6a8:	6013      	str	r3, [r2, #0]

			Board_UART_Print("Sending wheel velocity CAN message with ID: 0x703 Data: ");	// Print a UART Message with the current rpm
 6aa:	f7ff fe8f 	bl	3cc <Board_UART_Print>
			Board_UART_Println(rpm_str);
 6ae:	481d      	ldr	r0, [pc, #116]	; (724 <main+0x14c>)
 6b0:	f7ff fe98 	bl	3e4 <Board_UART_Println>

			msg_obj.mode_id = 0x703;		//Setup the CAN message
 6b4:	9b01      	ldr	r3, [sp, #4]
			msg_obj.msgobj = 2;
			msg_obj.dlc = 2;
			msg_obj.data_16[0] = curr_rpm;
			LPC_CCAN_API->can_transmit(&msg_obj);	//Transmit to the Vehicle
 6b6:	1c20      	adds	r0, r4, #0
			rpm_count = 0;								// Set the count for the average back to 0

			Board_UART_Print("Sending wheel velocity CAN message with ID: 0x703 Data: ");	// Print a UART Message with the current rpm
			Board_UART_Println(rpm_str);

			msg_obj.mode_id = 0x703;		//Setup the CAN message
 6b8:	6023      	str	r3, [r4, #0]
			msg_obj.msgobj = 2;
 6ba:	2302      	movs	r3, #2
 6bc:	7463      	strb	r3, [r4, #17]
			msg_obj.dlc = 2;
 6be:	7423      	strb	r3, [r4, #16]
			msg_obj.data_16[0] = curr_rpm;
 6c0:	4b17      	ldr	r3, [pc, #92]	; (720 <main+0x148>)
 6c2:	881b      	ldrh	r3, [r3, #0]
 6c4:	8123      	strh	r3, [r4, #8]
			LPC_CCAN_API->can_transmit(&msg_obj);	//Transmit to the Vehicle
 6c6:	6833      	ldr	r3, [r6, #0]
 6c8:	689b      	ldr	r3, [r3, #8]
 6ca:	691b      	ldr	r3, [r3, #16]
 6cc:	4798      	blx	r3
			lastPrint = msTicks;							// Reset the .2 second timer
 6ce:	683b      	ldr	r3, [r7, #0]
 6d0:	602b      	str	r3, [r5, #0]
 6d2:	e7c1      	b.n	658 <main+0x80>
 6d4:	50020000 	.word	0x50020000
 6d8:	00000acf 	.word	0x00000acf
 6dc:	10000194 	.word	0x10000194
 6e0:	100001c0 	.word	0x100001c0
 6e4:	00000561 	.word	0x00000561
 6e8:	0007a120 	.word	0x0007a120
 6ec:	00000579 	.word	0x00000579
 6f0:	00000565 	.word	0x00000565
 6f4:	10000280 	.word	0x10000280
 6f8:	1fff1ff8 	.word	0x1fff1ff8
 6fc:	100001a8 	.word	0x100001a8
 700:	00000703 	.word	0x00000703
 704:	000007ff 	.word	0x000007ff
 708:	10000192 	.word	0x10000192
 70c:	1000018c 	.word	0x1000018c
 710:	10000284 	.word	0x10000284
 714:	1000016c 	.word	0x1000016c
 718:	00000ada 	.word	0x00000ada
 71c:	10000108 	.word	0x10000108
 720:	10000190 	.word	0x10000190
 724:	10000170 	.word	0x10000170
 728:	10000188 	.word	0x10000188
 72c:	00000ae8 	.word	0x00000ae8

00000730 <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 730:	218e      	movs	r1, #142	; 0x8e
 732:	2020      	movs	r0, #32
 734:	4b1e      	ldr	r3, [pc, #120]	; (7b0 <SystemInit+0x80>)
 736:	0089      	lsls	r1, r1, #2
 738:	585a      	ldr	r2, [r3, r1]
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
 73a:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 73c:	4382      	bics	r2, r0
 73e:	505a      	str	r2, [r3, r1]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
 740:	2200      	movs	r2, #0
 742:	621a      	str	r2, [r3, #32]
 744:	32c8      	adds	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 746:	46c0      	nop			; (mov r8, r8)
 748:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
 74a:	2a00      	cmp	r2, #0
 74c:	d1fb      	bne.n	746 <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 74e:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 750:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 752:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
 754:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
 756:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
 758:	6c59      	ldr	r1, [r3, #68]	; 0x44
 75a:	4a15      	ldr	r2, [pc, #84]	; (7b0 <SystemInit+0x80>)
 75c:	07c9      	lsls	r1, r1, #31
 75e:	d5fb      	bpl.n	758 <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 760:	2161      	movs	r1, #97	; 0x61
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 762:	208e      	movs	r0, #142	; 0x8e
 764:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 766:	6091      	str	r1, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 768:	0080      	lsls	r0, r0, #2
 76a:	5811      	ldr	r1, [r2, r0]
 76c:	43a1      	bics	r1, r4
 76e:	5011      	str	r1, [r2, r0]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
 770:	2101      	movs	r1, #1
 772:	68d8      	ldr	r0, [r3, #12]
 774:	4a0e      	ldr	r2, [pc, #56]	; (7b0 <SystemInit+0x80>)
 776:	4208      	tst	r0, r1
 778:	d0fa      	beq.n	770 <SystemInit+0x40>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 77a:	2000      	movs	r0, #0
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 77c:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 77e:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 780:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 782:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 784:	2001      	movs	r0, #1
 786:	6f59      	ldr	r1, [r3, #116]	; 0x74
 788:	4a09      	ldr	r2, [pc, #36]	; (7b0 <SystemInit+0x80>)
 78a:	4201      	tst	r1, r0
 78c:	d0fa      	beq.n	784 <SystemInit+0x54>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 78e:	238e      	movs	r3, #142	; 0x8e
 790:	2480      	movs	r4, #128	; 0x80
 792:	009b      	lsls	r3, r3, #2
 794:	58d1      	ldr	r1, [r2, r3]
 796:	00e4      	lsls	r4, r4, #3
 798:	4321      	orrs	r1, r4
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 79a:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 79c:	50d1      	str	r1, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 79e:	58d1      	ldr	r1, [r2, r3]
 7a0:	0064      	lsls	r4, r4, #1
 7a2:	4321      	orrs	r1, r4
 7a4:	50d1      	str	r1, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 7a6:	6790      	str	r0, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 7a8:	4b02      	ldr	r3, [pc, #8]	; (7b4 <SystemInit+0x84>)
 7aa:	4a03      	ldr	r2, [pc, #12]	; (7b8 <SystemInit+0x88>)
 7ac:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 7ae:	bd10      	pop	{r4, pc}
 7b0:	40048000 	.word	0x40048000
 7b4:	40048004 	.word	0x40048004
 7b8:	0001005f 	.word	0x0001005f

000007bc <__aeabi_uidiv>:
 7bc:	2200      	movs	r2, #0
 7be:	0843      	lsrs	r3, r0, #1
 7c0:	428b      	cmp	r3, r1
 7c2:	d374      	bcc.n	8ae <__aeabi_uidiv+0xf2>
 7c4:	0903      	lsrs	r3, r0, #4
 7c6:	428b      	cmp	r3, r1
 7c8:	d35f      	bcc.n	88a <__aeabi_uidiv+0xce>
 7ca:	0a03      	lsrs	r3, r0, #8
 7cc:	428b      	cmp	r3, r1
 7ce:	d344      	bcc.n	85a <__aeabi_uidiv+0x9e>
 7d0:	0b03      	lsrs	r3, r0, #12
 7d2:	428b      	cmp	r3, r1
 7d4:	d328      	bcc.n	828 <__aeabi_uidiv+0x6c>
 7d6:	0c03      	lsrs	r3, r0, #16
 7d8:	428b      	cmp	r3, r1
 7da:	d30d      	bcc.n	7f8 <__aeabi_uidiv+0x3c>
 7dc:	22ff      	movs	r2, #255	; 0xff
 7de:	0209      	lsls	r1, r1, #8
 7e0:	ba12      	rev	r2, r2
 7e2:	0c03      	lsrs	r3, r0, #16
 7e4:	428b      	cmp	r3, r1
 7e6:	d302      	bcc.n	7ee <__aeabi_uidiv+0x32>
 7e8:	1212      	asrs	r2, r2, #8
 7ea:	0209      	lsls	r1, r1, #8
 7ec:	d065      	beq.n	8ba <__aeabi_uidiv+0xfe>
 7ee:	0b03      	lsrs	r3, r0, #12
 7f0:	428b      	cmp	r3, r1
 7f2:	d319      	bcc.n	828 <__aeabi_uidiv+0x6c>
 7f4:	e000      	b.n	7f8 <__aeabi_uidiv+0x3c>
 7f6:	0a09      	lsrs	r1, r1, #8
 7f8:	0bc3      	lsrs	r3, r0, #15
 7fa:	428b      	cmp	r3, r1
 7fc:	d301      	bcc.n	802 <__aeabi_uidiv+0x46>
 7fe:	03cb      	lsls	r3, r1, #15
 800:	1ac0      	subs	r0, r0, r3
 802:	4152      	adcs	r2, r2
 804:	0b83      	lsrs	r3, r0, #14
 806:	428b      	cmp	r3, r1
 808:	d301      	bcc.n	80e <__aeabi_uidiv+0x52>
 80a:	038b      	lsls	r3, r1, #14
 80c:	1ac0      	subs	r0, r0, r3
 80e:	4152      	adcs	r2, r2
 810:	0b43      	lsrs	r3, r0, #13
 812:	428b      	cmp	r3, r1
 814:	d301      	bcc.n	81a <__aeabi_uidiv+0x5e>
 816:	034b      	lsls	r3, r1, #13
 818:	1ac0      	subs	r0, r0, r3
 81a:	4152      	adcs	r2, r2
 81c:	0b03      	lsrs	r3, r0, #12
 81e:	428b      	cmp	r3, r1
 820:	d301      	bcc.n	826 <__aeabi_uidiv+0x6a>
 822:	030b      	lsls	r3, r1, #12
 824:	1ac0      	subs	r0, r0, r3
 826:	4152      	adcs	r2, r2
 828:	0ac3      	lsrs	r3, r0, #11
 82a:	428b      	cmp	r3, r1
 82c:	d301      	bcc.n	832 <__aeabi_uidiv+0x76>
 82e:	02cb      	lsls	r3, r1, #11
 830:	1ac0      	subs	r0, r0, r3
 832:	4152      	adcs	r2, r2
 834:	0a83      	lsrs	r3, r0, #10
 836:	428b      	cmp	r3, r1
 838:	d301      	bcc.n	83e <__aeabi_uidiv+0x82>
 83a:	028b      	lsls	r3, r1, #10
 83c:	1ac0      	subs	r0, r0, r3
 83e:	4152      	adcs	r2, r2
 840:	0a43      	lsrs	r3, r0, #9
 842:	428b      	cmp	r3, r1
 844:	d301      	bcc.n	84a <__aeabi_uidiv+0x8e>
 846:	024b      	lsls	r3, r1, #9
 848:	1ac0      	subs	r0, r0, r3
 84a:	4152      	adcs	r2, r2
 84c:	0a03      	lsrs	r3, r0, #8
 84e:	428b      	cmp	r3, r1
 850:	d301      	bcc.n	856 <__aeabi_uidiv+0x9a>
 852:	020b      	lsls	r3, r1, #8
 854:	1ac0      	subs	r0, r0, r3
 856:	4152      	adcs	r2, r2
 858:	d2cd      	bcs.n	7f6 <__aeabi_uidiv+0x3a>
 85a:	09c3      	lsrs	r3, r0, #7
 85c:	428b      	cmp	r3, r1
 85e:	d301      	bcc.n	864 <__aeabi_uidiv+0xa8>
 860:	01cb      	lsls	r3, r1, #7
 862:	1ac0      	subs	r0, r0, r3
 864:	4152      	adcs	r2, r2
 866:	0983      	lsrs	r3, r0, #6
 868:	428b      	cmp	r3, r1
 86a:	d301      	bcc.n	870 <__aeabi_uidiv+0xb4>
 86c:	018b      	lsls	r3, r1, #6
 86e:	1ac0      	subs	r0, r0, r3
 870:	4152      	adcs	r2, r2
 872:	0943      	lsrs	r3, r0, #5
 874:	428b      	cmp	r3, r1
 876:	d301      	bcc.n	87c <__aeabi_uidiv+0xc0>
 878:	014b      	lsls	r3, r1, #5
 87a:	1ac0      	subs	r0, r0, r3
 87c:	4152      	adcs	r2, r2
 87e:	0903      	lsrs	r3, r0, #4
 880:	428b      	cmp	r3, r1
 882:	d301      	bcc.n	888 <__aeabi_uidiv+0xcc>
 884:	010b      	lsls	r3, r1, #4
 886:	1ac0      	subs	r0, r0, r3
 888:	4152      	adcs	r2, r2
 88a:	08c3      	lsrs	r3, r0, #3
 88c:	428b      	cmp	r3, r1
 88e:	d301      	bcc.n	894 <__aeabi_uidiv+0xd8>
 890:	00cb      	lsls	r3, r1, #3
 892:	1ac0      	subs	r0, r0, r3
 894:	4152      	adcs	r2, r2
 896:	0883      	lsrs	r3, r0, #2
 898:	428b      	cmp	r3, r1
 89a:	d301      	bcc.n	8a0 <__aeabi_uidiv+0xe4>
 89c:	008b      	lsls	r3, r1, #2
 89e:	1ac0      	subs	r0, r0, r3
 8a0:	4152      	adcs	r2, r2
 8a2:	0843      	lsrs	r3, r0, #1
 8a4:	428b      	cmp	r3, r1
 8a6:	d301      	bcc.n	8ac <__aeabi_uidiv+0xf0>
 8a8:	004b      	lsls	r3, r1, #1
 8aa:	1ac0      	subs	r0, r0, r3
 8ac:	4152      	adcs	r2, r2
 8ae:	1a41      	subs	r1, r0, r1
 8b0:	d200      	bcs.n	8b4 <__aeabi_uidiv+0xf8>
 8b2:	4601      	mov	r1, r0
 8b4:	4152      	adcs	r2, r2
 8b6:	4610      	mov	r0, r2
 8b8:	4770      	bx	lr
 8ba:	e7ff      	b.n	8bc <__aeabi_uidiv+0x100>
 8bc:	b501      	push	{r0, lr}
 8be:	2000      	movs	r0, #0
 8c0:	f000 f80c 	bl	8dc <__aeabi_idiv0>
 8c4:	bd02      	pop	{r1, pc}
 8c6:	46c0      	nop			; (mov r8, r8)

000008c8 <__aeabi_uidivmod>:
 8c8:	2900      	cmp	r1, #0
 8ca:	d0f7      	beq.n	8bc <__aeabi_uidiv+0x100>
 8cc:	b503      	push	{r0, r1, lr}
 8ce:	f7ff ff75 	bl	7bc <__aeabi_uidiv>
 8d2:	bc0e      	pop	{r1, r2, r3}
 8d4:	4342      	muls	r2, r0
 8d6:	1a89      	subs	r1, r1, r2
 8d8:	4718      	bx	r3
 8da:	46c0      	nop			; (mov r8, r8)

000008dc <__aeabi_idiv0>:
 8dc:	4770      	bx	lr
 8de:	46c0      	nop			; (mov r8, r8)

000008e0 <__itoa>:
 8e0:	1e93      	subs	r3, r2, #2
 8e2:	b510      	push	{r4, lr}
 8e4:	2b22      	cmp	r3, #34	; 0x22
 8e6:	d80f      	bhi.n	908 <__itoa+0x28>
 8e8:	2a0a      	cmp	r2, #10
 8ea:	d006      	beq.n	8fa <__itoa+0x1a>
 8ec:	2300      	movs	r3, #0
 8ee:	1c0c      	adds	r4, r1, #0
 8f0:	18c9      	adds	r1, r1, r3
 8f2:	f000 f883 	bl	9fc <__utoa>
 8f6:	1c20      	adds	r0, r4, #0
 8f8:	bd10      	pop	{r4, pc}
 8fa:	2800      	cmp	r0, #0
 8fc:	daf6      	bge.n	8ec <__itoa+0xc>
 8fe:	232d      	movs	r3, #45	; 0x2d
 900:	4240      	negs	r0, r0
 902:	700b      	strb	r3, [r1, #0]
 904:	3b2c      	subs	r3, #44	; 0x2c
 906:	e7f2      	b.n	8ee <__itoa+0xe>
 908:	2300      	movs	r3, #0
 90a:	2000      	movs	r0, #0
 90c:	700b      	strb	r3, [r1, #0]
 90e:	e7f3      	b.n	8f8 <__itoa+0x18>

00000910 <itoa>:
 910:	b508      	push	{r3, lr}
 912:	f7ff ffe5 	bl	8e0 <__itoa>
 916:	bd08      	pop	{r3, pc}

00000918 <memcpy>:
 918:	b570      	push	{r4, r5, r6, lr}
 91a:	2a0f      	cmp	r2, #15
 91c:	d932      	bls.n	984 <memcpy+0x6c>
 91e:	1c04      	adds	r4, r0, #0
 920:	430c      	orrs	r4, r1
 922:	1c0b      	adds	r3, r1, #0
 924:	07a4      	lsls	r4, r4, #30
 926:	d131      	bne.n	98c <memcpy+0x74>
 928:	1c15      	adds	r5, r2, #0
 92a:	1c04      	adds	r4, r0, #0
 92c:	3d10      	subs	r5, #16
 92e:	092d      	lsrs	r5, r5, #4
 930:	3501      	adds	r5, #1
 932:	012d      	lsls	r5, r5, #4
 934:	1949      	adds	r1, r1, r5
 936:	681e      	ldr	r6, [r3, #0]
 938:	6026      	str	r6, [r4, #0]
 93a:	685e      	ldr	r6, [r3, #4]
 93c:	6066      	str	r6, [r4, #4]
 93e:	689e      	ldr	r6, [r3, #8]
 940:	60a6      	str	r6, [r4, #8]
 942:	68de      	ldr	r6, [r3, #12]
 944:	3310      	adds	r3, #16
 946:	60e6      	str	r6, [r4, #12]
 948:	3410      	adds	r4, #16
 94a:	4299      	cmp	r1, r3
 94c:	d1f3      	bne.n	936 <memcpy+0x1e>
 94e:	230f      	movs	r3, #15
 950:	1945      	adds	r5, r0, r5
 952:	4013      	ands	r3, r2
 954:	2b03      	cmp	r3, #3
 956:	d91b      	bls.n	990 <memcpy+0x78>
 958:	1f1c      	subs	r4, r3, #4
 95a:	2300      	movs	r3, #0
 95c:	08a4      	lsrs	r4, r4, #2
 95e:	3401      	adds	r4, #1
 960:	00a4      	lsls	r4, r4, #2
 962:	58ce      	ldr	r6, [r1, r3]
 964:	50ee      	str	r6, [r5, r3]
 966:	3304      	adds	r3, #4
 968:	42a3      	cmp	r3, r4
 96a:	d1fa      	bne.n	962 <memcpy+0x4a>
 96c:	18ed      	adds	r5, r5, r3
 96e:	18c9      	adds	r1, r1, r3
 970:	2303      	movs	r3, #3
 972:	401a      	ands	r2, r3
 974:	d005      	beq.n	982 <memcpy+0x6a>
 976:	2300      	movs	r3, #0
 978:	5ccc      	ldrb	r4, [r1, r3]
 97a:	54ec      	strb	r4, [r5, r3]
 97c:	3301      	adds	r3, #1
 97e:	4293      	cmp	r3, r2
 980:	d1fa      	bne.n	978 <memcpy+0x60>
 982:	bd70      	pop	{r4, r5, r6, pc}
 984:	1c05      	adds	r5, r0, #0
 986:	2a00      	cmp	r2, #0
 988:	d1f5      	bne.n	976 <memcpy+0x5e>
 98a:	e7fa      	b.n	982 <memcpy+0x6a>
 98c:	1c05      	adds	r5, r0, #0
 98e:	e7f2      	b.n	976 <memcpy+0x5e>
 990:	1c1a      	adds	r2, r3, #0
 992:	e7f8      	b.n	986 <memcpy+0x6e>

00000994 <strlen>:
 994:	b510      	push	{r4, lr}
 996:	0783      	lsls	r3, r0, #30
 998:	d027      	beq.n	9ea <strlen+0x56>
 99a:	7803      	ldrb	r3, [r0, #0]
 99c:	2b00      	cmp	r3, #0
 99e:	d026      	beq.n	9ee <strlen+0x5a>
 9a0:	1c03      	adds	r3, r0, #0
 9a2:	2103      	movs	r1, #3
 9a4:	e002      	b.n	9ac <strlen+0x18>
 9a6:	781a      	ldrb	r2, [r3, #0]
 9a8:	2a00      	cmp	r2, #0
 9aa:	d01c      	beq.n	9e6 <strlen+0x52>
 9ac:	3301      	adds	r3, #1
 9ae:	420b      	tst	r3, r1
 9b0:	d1f9      	bne.n	9a6 <strlen+0x12>
 9b2:	6819      	ldr	r1, [r3, #0]
 9b4:	4a0f      	ldr	r2, [pc, #60]	; (9f4 <strlen+0x60>)
 9b6:	4c10      	ldr	r4, [pc, #64]	; (9f8 <strlen+0x64>)
 9b8:	188a      	adds	r2, r1, r2
 9ba:	438a      	bics	r2, r1
 9bc:	4222      	tst	r2, r4
 9be:	d10f      	bne.n	9e0 <strlen+0x4c>
 9c0:	3304      	adds	r3, #4
 9c2:	6819      	ldr	r1, [r3, #0]
 9c4:	4a0b      	ldr	r2, [pc, #44]	; (9f4 <strlen+0x60>)
 9c6:	188a      	adds	r2, r1, r2
 9c8:	438a      	bics	r2, r1
 9ca:	4222      	tst	r2, r4
 9cc:	d108      	bne.n	9e0 <strlen+0x4c>
 9ce:	3304      	adds	r3, #4
 9d0:	6819      	ldr	r1, [r3, #0]
 9d2:	4a08      	ldr	r2, [pc, #32]	; (9f4 <strlen+0x60>)
 9d4:	188a      	adds	r2, r1, r2
 9d6:	438a      	bics	r2, r1
 9d8:	4222      	tst	r2, r4
 9da:	d0f1      	beq.n	9c0 <strlen+0x2c>
 9dc:	e000      	b.n	9e0 <strlen+0x4c>
 9de:	3301      	adds	r3, #1
 9e0:	781a      	ldrb	r2, [r3, #0]
 9e2:	2a00      	cmp	r2, #0
 9e4:	d1fb      	bne.n	9de <strlen+0x4a>
 9e6:	1a18      	subs	r0, r3, r0
 9e8:	bd10      	pop	{r4, pc}
 9ea:	1c03      	adds	r3, r0, #0
 9ec:	e7e1      	b.n	9b2 <strlen+0x1e>
 9ee:	2000      	movs	r0, #0
 9f0:	e7fa      	b.n	9e8 <strlen+0x54>
 9f2:	46c0      	nop			; (mov r8, r8)
 9f4:	fefefeff 	.word	0xfefefeff
 9f8:	80808080 	.word	0x80808080

000009fc <__utoa>:
 9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 9fe:	4657      	mov	r7, sl
 a00:	4645      	mov	r5, r8
 a02:	464e      	mov	r6, r9
 a04:	b4e0      	push	{r5, r6, r7}
 a06:	b08a      	sub	sp, #40	; 0x28
 a08:	4690      	mov	r8, r2
 a0a:	466a      	mov	r2, sp
 a0c:	4b1d      	ldr	r3, [pc, #116]	; (a84 <__utoa+0x88>)
 a0e:	1c0d      	adds	r5, r1, #0
 a10:	1c06      	adds	r6, r0, #0
 a12:	cb13      	ldmia	r3!, {r0, r1, r4}
 a14:	c213      	stmia	r2!, {r0, r1, r4}
 a16:	cb13      	ldmia	r3!, {r0, r1, r4}
 a18:	c213      	stmia	r2!, {r0, r1, r4}
 a1a:	cb13      	ldmia	r3!, {r0, r1, r4}
 a1c:	c213      	stmia	r2!, {r0, r1, r4}
 a1e:	781b      	ldrb	r3, [r3, #0]
 a20:	46ea      	mov	sl, sp
 a22:	7013      	strb	r3, [r2, #0]
 a24:	4643      	mov	r3, r8
 a26:	3b02      	subs	r3, #2
 a28:	1c2f      	adds	r7, r5, #0
 a2a:	2400      	movs	r4, #0
 a2c:	2b22      	cmp	r3, #34	; 0x22
 a2e:	d901      	bls.n	a34 <__utoa+0x38>
 a30:	e024      	b.n	a7c <__utoa+0x80>
 a32:	464c      	mov	r4, r9
 a34:	1c63      	adds	r3, r4, #1
 a36:	1c30      	adds	r0, r6, #0
 a38:	4641      	mov	r1, r8
 a3a:	4699      	mov	r9, r3
 a3c:	f7ff ff44 	bl	8c8 <__aeabi_uidivmod>
 a40:	4653      	mov	r3, sl
 a42:	5c5b      	ldrb	r3, [r3, r1]
 a44:	1c30      	adds	r0, r6, #0
 a46:	703b      	strb	r3, [r7, #0]
 a48:	4641      	mov	r1, r8
 a4a:	f7ff feb7 	bl	7bc <__aeabi_uidiv>
 a4e:	3701      	adds	r7, #1
 a50:	1e06      	subs	r6, r0, #0
 a52:	d1ee      	bne.n	a32 <__utoa+0x36>
 a54:	464b      	mov	r3, r9
 a56:	54e8      	strb	r0, [r5, r3]
 a58:	2300      	movs	r3, #0
 a5a:	2c00      	cmp	r4, #0
 a5c:	d007      	beq.n	a6e <__utoa+0x72>
 a5e:	5cea      	ldrb	r2, [r5, r3]
 a60:	5d29      	ldrb	r1, [r5, r4]
 a62:	54e9      	strb	r1, [r5, r3]
 a64:	552a      	strb	r2, [r5, r4]
 a66:	3301      	adds	r3, #1
 a68:	3c01      	subs	r4, #1
 a6a:	42a3      	cmp	r3, r4
 a6c:	dbf7      	blt.n	a5e <__utoa+0x62>
 a6e:	1c28      	adds	r0, r5, #0
 a70:	b00a      	add	sp, #40	; 0x28
 a72:	bc1c      	pop	{r2, r3, r4}
 a74:	4690      	mov	r8, r2
 a76:	4699      	mov	r9, r3
 a78:	46a2      	mov	sl, r4
 a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 a7c:	702c      	strb	r4, [r5, #0]
 a7e:	2000      	movs	r0, #0
 a80:	e7f6      	b.n	a70 <__utoa+0x74>
 a82:	46c0      	nop			; (mov r8, r8)
 a84:	00000b24 	.word	0x00000b24

00000a88 <wdtOSCRate>:
 a88:	00000000 000927c0 00100590 00155cc0     .....'.......\..
 a98:	001ab3f0 00200b20 00249f00 002932e0     .... . ...$..2).
 aa8:	002dc6c0 00319750 003567e0 00393870     ..-.P.1..g5.p89.
 ab8:	003d0900 00401640 00432380 004630c0     ..=.@.@..#C..0F.

00000ac8 <OscRateIn>:
 ac8:	00000000 53000a0d 74726174 75206465     .......Started u
 ad8:	41430070 7245204e 3a726f72 00623020     p.CAN Error: 0b.
 ae8:	646e6553 20676e69 65656877 6576206c     Sending wheel ve
 af8:	69636f6c 43207974 6d204e41 61737365     locity CAN messa
 b08:	77206567 20687469 203a4449 30377830     ge with ID: 0x70
 b18:	61442033 203a6174 00000000 33323130     3 Data: ....0123
 b28:	37363534 62613938 66656463 6a696867     456789abcdefghij
 b38:	6e6d6c6b 7271706f 76757473 7a797877     klmnopqrstuvwxyz
 b48:	00000000                                ....
